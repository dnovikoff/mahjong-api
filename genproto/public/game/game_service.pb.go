// Code generated by protoc-gen-go. DO NOT EDIT.
// source: public/game/game_service.proto

package game

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("public/game/game_service.proto", fileDescriptor_4e9392f2bf5751ad) }

var fileDescriptor_4e9392f2bf5751ad = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x28, 0x4d, 0xca,
	0xc9, 0x4c, 0xd6, 0x4f, 0x4f, 0xcc, 0x4d, 0x05, 0x13, 0xf1, 0xc5, 0xa9, 0x45, 0x65, 0x99, 0xc9,
	0xa9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x3c, 0xb9, 0x89, 0x19, 0x59, 0xf9, 0x79, 0xe9,
	0x7a, 0x20, 0x39, 0x29, 0x09, 0x64, 0xd5, 0xc9, 0x39, 0x99, 0xa9, 0x79, 0x25, 0x10, 0x75, 0xa8,
	0x32, 0x20, 0x23, 0x52, 0x8b, 0x20, 0x32, 0x46, 0x5e, 0x5c, 0xdc, 0xee, 0x89, 0xb9, 0xa9, 0xc1,
	0x10, 0x63, 0x85, 0xac, 0xb9, 0xd8, 0x9d, 0xf3, 0xf3, 0xf2, 0x52, 0x93, 0x4b, 0x84, 0x44, 0xf4,
	0x90, 0x0d, 0xd7, 0x73, 0x06, 0x9b, 0x27, 0x85, 0x26, 0x1a, 0x0c, 0x36, 0x4b, 0x89, 0x41, 0x83,
	0xd1, 0x80, 0xd1, 0xc9, 0x3c, 0xca, 0x34, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f,
	0x57, 0x3f, 0x25, 0x2f, 0xbf, 0x2c, 0x33, 0x3b, 0x3f, 0x2d, 0x4d, 0x1f, 0xaa, 0x43, 0x37, 0xb1,
	0x20, 0x53, 0x3f, 0x3d, 0x35, 0x0f, 0x6c, 0xb1, 0x3e, 0x92, 0x8b, 0x92, 0xd8, 0xc0, 0x42, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0x86, 0xfe, 0xca, 0xef, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	// Use tokens, gained in Create to auth Play via "token" header
	Connect(ctx context.Context, opts ...grpc.CallOption) (GameService_ConnectClient, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (GameService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GameService_serviceDesc.Streams[0], "/mahjong.game.GameService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceConnectClient{stream}
	return x, nil
}

type GameService_ConnectClient interface {
	Send(*Client) error
	Recv() (*Server, error)
	grpc.ClientStream
}

type gameServiceConnectClient struct {
	grpc.ClientStream
}

func (x *gameServiceConnectClient) Send(m *Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServiceConnectClient) Recv() (*Server, error) {
	m := new(Server)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	// Use tokens, gained in Create to auth Play via "token" header
	Connect(GameService_ConnectServer) error
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServiceServer).Connect(&gameServiceConnectServer{stream})
}

type GameService_ConnectServer interface {
	Send(*Server) error
	Recv() (*Client, error)
	grpc.ServerStream
}

type gameServiceConnectServer struct {
	grpc.ServerStream
}

func (x *gameServiceConnectServer) Send(m *Server) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServiceConnectServer) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mahjong.game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _GameService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "public/game/game_service.proto",
}
