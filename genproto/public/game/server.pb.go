// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.13.0
// source: public/game/server.proto

package game

import (
	base "github.com/dnovikoff/mahjong-api/genproto/public/base"
	log "github.com/dnovikoff/mahjong-api/genproto/public/log"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Server initiated message
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If server message contains suggset, the client is expected
	// to answer with Client message, with same "suggest_id" set.
	// The exception is when suggest.canceled = true. With such message
	// server tells that on of previous messages (selected by suggest_id) is
	// out of date (ex. by timeout) and the response is no longer expected.
	Suggest *Suggest `protobuf:"bytes,1,opt,name=suggest,proto3" json:"suggest,omitempty"`
	// Types that are assignable to OneofEvents:
	//
	//	*Server_Take
	//	*Server_Drop
	//	*Server_Changes
	//	*Server_Say
	//	*Server_Declare
	//	*Server_Win
	//	*Server_Draw
	//	*Server_Indicator
	//	*Server_RoundStart
	//	*Server_GameStart
	//	*Server_GameEnd
	//	*Server_Furiten
	//	*Server_Recover
	//	*Server_PlayerStatus
	//	*Server_Settings
	OneofEvents isServer_OneofEvents `protobuf_oneof:"oneof_events"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_game_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_public_game_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_public_game_server_proto_rawDescGZIP(), []int{0}
}

func (x *Server) GetSuggest() *Suggest {
	if x != nil {
		return x.Suggest
	}
	return nil
}

func (m *Server) GetOneofEvents() isServer_OneofEvents {
	if m != nil {
		return m.OneofEvents
	}
	return nil
}

func (x *Server) GetTake() *log.TakeEvent {
	if x, ok := x.GetOneofEvents().(*Server_Take); ok {
		return x.Take
	}
	return nil
}

func (x *Server) GetDrop() *log.DropEvent {
	if x, ok := x.GetOneofEvents().(*Server_Drop); ok {
		return x.Drop
	}
	return nil
}

func (x *Server) GetChanges() *log.ScoreChangesEvent {
	if x, ok := x.GetOneofEvents().(*Server_Changes); ok {
		return x.Changes
	}
	return nil
}

func (x *Server) GetSay() *log.SayEvent {
	if x, ok := x.GetOneofEvents().(*Server_Say); ok {
		return x.Say
	}
	return nil
}

func (x *Server) GetDeclare() *log.DeclareEvent {
	if x, ok := x.GetOneofEvents().(*Server_Declare); ok {
		return x.Declare
	}
	return nil
}

func (x *Server) GetWin() *log.WinEvent {
	if x, ok := x.GetOneofEvents().(*Server_Win); ok {
		return x.Win
	}
	return nil
}

func (x *Server) GetDraw() *log.DrawEvent {
	if x, ok := x.GetOneofEvents().(*Server_Draw); ok {
		return x.Draw
	}
	return nil
}

func (x *Server) GetIndicator() *log.IndicatorEvent {
	if x, ok := x.GetOneofEvents().(*Server_Indicator); ok {
		return x.Indicator
	}
	return nil
}

func (x *Server) GetRoundStart() *log.RoundInfo {
	if x, ok := x.GetOneofEvents().(*Server_RoundStart); ok {
		return x.RoundStart
	}
	return nil
}

func (x *Server) GetGameStart() *GameStartEvent {
	if x, ok := x.GetOneofEvents().(*Server_GameStart); ok {
		return x.GameStart
	}
	return nil
}

func (x *Server) GetGameEnd() *GameEndEvent {
	if x, ok := x.GetOneofEvents().(*Server_GameEnd); ok {
		return x.GameEnd
	}
	return nil
}

func (x *Server) GetFuriten() log.Furiten {
	if x, ok := x.GetOneofEvents().(*Server_Furiten); ok {
		return x.Furiten
	}
	return log.Furiten(0)
}

func (x *Server) GetRecover() *RoundRecover {
	if x, ok := x.GetOneofEvents().(*Server_Recover); ok {
		return x.Recover
	}
	return nil
}

func (x *Server) GetPlayerStatus() *log.PlayerStatusEvent {
	if x, ok := x.GetOneofEvents().(*Server_PlayerStatus); ok {
		return x.PlayerStatus
	}
	return nil
}

func (x *Server) GetSettings() *Settings {
	if x, ok := x.GetOneofEvents().(*Server_Settings); ok {
		return x.Settings
	}
	return nil
}

type isServer_OneofEvents interface {
	isServer_OneofEvents()
}

type Server_Take struct {
	// Take could contain information about others taken tiles in some training mode
	Take *log.TakeEvent `protobuf:"bytes,3,opt,name=take,proto3,oneof"`
}

type Server_Drop struct {
	Drop *log.DropEvent `protobuf:"bytes,4,opt,name=drop,proto3,oneof"`
}

type Server_Changes struct {
	Changes *log.ScoreChangesEvent `protobuf:"bytes,5,opt,name=changes,proto3,oneof"`
}

type Server_Say struct {
	Say *log.SayEvent `protobuf:"bytes,6,opt,name=say,proto3,oneof"`
}

type Server_Declare struct {
	Declare *log.DeclareEvent `protobuf:"bytes,7,opt,name=declare,proto3,oneof"`
}

type Server_Win struct {
	Win *log.WinEvent `protobuf:"bytes,8,opt,name=win,proto3,oneof"`
}

type Server_Draw struct {
	Draw *log.DrawEvent `protobuf:"bytes,9,opt,name=draw,proto3,oneof"`
}

type Server_Indicator struct {
	Indicator *log.IndicatorEvent `protobuf:"bytes,10,opt,name=indicator,proto3,oneof"`
}

type Server_RoundStart struct {
	// Round info could contain information about only one or more hands (some training mode)
	RoundStart *log.RoundInfo `protobuf:"bytes,11,opt,name=round_start,json=roundStart,proto3,oneof"`
}

type Server_GameStart struct {
	GameStart *GameStartEvent `protobuf:"bytes,12,opt,name=game_start,json=gameStart,proto3,oneof"`
}

type Server_GameEnd struct {
	GameEnd *GameEndEvent `protobuf:"bytes,13,opt,name=game_end,json=gameEnd,proto3,oneof"`
}

type Server_Furiten struct {
	Furiten log.Furiten `protobuf:"varint,14,opt,name=furiten,proto3,enum=mahjong.log.Furiten,oneof"`
}

type Server_Recover struct {
	// Special message, sent by server when reconnected to recover state
	// Contains previously sent messages with no suggest field.
	Recover *RoundRecover `protobuf:"bytes,15,opt,name=recover,proto3,oneof"`
}

type Server_PlayerStatus struct {
	PlayerStatus *log.PlayerStatusEvent `protobuf:"bytes,16,opt,name=player_status,json=playerStatus,proto3,oneof"`
}

type Server_Settings struct {
	// Setting applied on server side.
	Settings *Settings `protobuf:"bytes,17,opt,name=settings,proto3,oneof"`
}

func (*Server_Take) isServer_OneofEvents() {}

func (*Server_Drop) isServer_OneofEvents() {}

func (*Server_Changes) isServer_OneofEvents() {}

func (*Server_Say) isServer_OneofEvents() {}

func (*Server_Declare) isServer_OneofEvents() {}

func (*Server_Win) isServer_OneofEvents() {}

func (*Server_Draw) isServer_OneofEvents() {}

func (*Server_Indicator) isServer_OneofEvents() {}

func (*Server_RoundStart) isServer_OneofEvents() {}

func (*Server_GameStart) isServer_OneofEvents() {}

func (*Server_GameEnd) isServer_OneofEvents() {}

func (*Server_Furiten) isServer_OneofEvents() {}

func (*Server_Recover) isServer_OneofEvents() {}

func (*Server_PlayerStatus) isServer_OneofEvents() {}

func (*Server_Settings) isServer_OneofEvents() {}

// Send after reconnect
type RoundRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Server `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *RoundRecover) Reset() {
	*x = RoundRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_game_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundRecover) ProtoMessage() {}

func (x *RoundRecover) ProtoReflect() protoreflect.Message {
	mi := &file_public_game_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundRecover.ProtoReflect.Descriptor instead.
func (*RoundRecover) Descriptor() ([]byte, []int) {
	return file_public_game_server_proto_rawDescGZIP(), []int{1}
}

func (x *RoundRecover) GetEvents() []*Server {
	if x != nil {
		return x.Events
	}
	return nil
}

// Final screen
type GameEndEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes   *log.Changes      `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
	EndReason log.GameEndReason `protobuf:"varint,2,opt,name=end_reason,json=endReason,proto3,enum=mahjong.log.GameEndReason" json:"end_reason,omitempty"`
}

func (x *GameEndEvent) Reset() {
	*x = GameEndEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_game_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndEvent) ProtoMessage() {}

func (x *GameEndEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_game_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndEvent.ProtoReflect.Descriptor instead.
func (*GameEndEvent) Descriptor() ([]byte, []int) {
	return file_public_game_server_proto_rawDescGZIP(), []int{2}
}

func (x *GameEndEvent) GetChanges() *log.Changes {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *GameEndEvent) GetEndReason() log.GameEndReason {
	if x != nil {
		return x.EndReason
	}
	return log.GameEndReason(0)
}

type GameStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIndex int64         `protobuf:"varint,1,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Info        *log.GameInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GameStartEvent) Reset() {
	*x = GameStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_game_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStartEvent) ProtoMessage() {}

func (x *GameStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_game_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStartEvent.ProtoReflect.Descriptor instead.
func (*GameStartEvent) Descriptor() ([]byte, []int) {
	return file_public_game_server_proto_rawDescGZIP(), []int{3}
}

func (x *GameStartEvent) GetClientIndex() int64 {
	if x != nil {
		return x.ClientIndex
	}
	return 0
}

func (x *GameStartEvent) GetInfo() *log.GameInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Suggest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should response with this id
	SuggestId        int64           `protobuf:"varint,1,opt,name=suggest_id,json=suggestId,proto3" json:"suggest_id,omitempty"`
	Pon              bool            `protobuf:"varint,2,opt,name=pon,proto3" json:"pon,omitempty"`
	Kan              bool            `protobuf:"varint,3,opt,name=kan,proto3" json:"kan,omitempty"`
	ClosedKanMask    int64           `protobuf:"varint,4,opt,name=closed_kan_mask,json=closedKanMask,proto3" json:"closed_kan_mask,omitempty"`
	UpgradeInstances *base.Instances `protobuf:"bytes,5,opt,name=upgrade_instances,json=upgradeInstances,proto3" json:"upgrade_instances,omitempty"`
	// 1+23
	ChiLeft bool `protobuf:"varint,6,opt,name=chi_left,json=chiLeft,proto3" json:"chi_left,omitempty"`
	// 2+13
	ChiCenter bool `protobuf:"varint,7,opt,name=chi_center,json=chiCenter,proto3" json:"chi_center,omitempty"`
	// 3+12
	ChiRight   bool  `protobuf:"varint,8,opt,name=chi_right,json=chiRight,proto3" json:"chi_right,omitempty"`
	DropMask   int64 `protobuf:"varint,9,opt,name=drop_mask,json=dropMask,proto3" json:"drop_mask,omitempty"`
	RiichiMask int64 `protobuf:"varint,10,opt,name=riichi_mask,json=riichiMask,proto3" json:"riichi_mask,omitempty"`
	Win        bool  `protobuf:"varint,11,opt,name=win,proto3" json:"win,omitempty"`
	Draw       bool  `protobuf:"varint,12,opt,name=draw,proto3" json:"draw,omitempty"`
	// Suggested to show noten (could show tempai)
	// Could be used for some rulesets
	Noten bool `protobuf:"varint,13,opt,name=noten,proto3" json:"noten,omitempty"`
	// Specific for some rules, where leader could continue game (agari yame).
	ContinueGame bool `protobuf:"varint,14,opt,name=continue_game,json=continueGame,proto3" json:"continue_game,omitempty"`
	// Time to answer. Should be used to display timer to player.
	// Client should not take any action if player does not select an answer in given time.
	// After the timeout server will discard the event.
	// Server could add additional time on its side to gurantee player will have at least
	// timeout time.
	Timeout *duration.Duration `protobuf:"bytes,15,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Means all suggest are canceled. Must not be answered.
	Canceled bool `protobuf:"varint,16,opt,name=canceled,proto3" json:"canceled,omitempty"`
}

func (x *Suggest) Reset() {
	*x = Suggest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_game_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suggest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suggest) ProtoMessage() {}

func (x *Suggest) ProtoReflect() protoreflect.Message {
	mi := &file_public_game_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suggest.ProtoReflect.Descriptor instead.
func (*Suggest) Descriptor() ([]byte, []int) {
	return file_public_game_server_proto_rawDescGZIP(), []int{4}
}

func (x *Suggest) GetSuggestId() int64 {
	if x != nil {
		return x.SuggestId
	}
	return 0
}

func (x *Suggest) GetPon() bool {
	if x != nil {
		return x.Pon
	}
	return false
}

func (x *Suggest) GetKan() bool {
	if x != nil {
		return x.Kan
	}
	return false
}

func (x *Suggest) GetClosedKanMask() int64 {
	if x != nil {
		return x.ClosedKanMask
	}
	return 0
}

func (x *Suggest) GetUpgradeInstances() *base.Instances {
	if x != nil {
		return x.UpgradeInstances
	}
	return nil
}

func (x *Suggest) GetChiLeft() bool {
	if x != nil {
		return x.ChiLeft
	}
	return false
}

func (x *Suggest) GetChiCenter() bool {
	if x != nil {
		return x.ChiCenter
	}
	return false
}

func (x *Suggest) GetChiRight() bool {
	if x != nil {
		return x.ChiRight
	}
	return false
}

func (x *Suggest) GetDropMask() int64 {
	if x != nil {
		return x.DropMask
	}
	return 0
}

func (x *Suggest) GetRiichiMask() int64 {
	if x != nil {
		return x.RiichiMask
	}
	return 0
}

func (x *Suggest) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *Suggest) GetDraw() bool {
	if x != nil {
		return x.Draw
	}
	return false
}

func (x *Suggest) GetNoten() bool {
	if x != nil {
		return x.Noten
	}
	return false
}

func (x *Suggest) GetContinueGame() bool {
	if x != nil {
		return x.ContinueGame
	}
	return false
}

func (x *Suggest) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Suggest) GetCanceled() bool {
	if x != nil {
		return x.Canceled
	}
	return false
}

var File_public_game_server_proto protoreflect.FileDescriptor

var file_public_game_server_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf3, 0x06, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x72, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f,
	0x67, 0x2e, 0x53, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x61,
	0x79, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e,
	0x6c, 0x6f, 0x67, 0x2e, 0x57, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x77, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c,
	0x6f, 0x67, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f,
	0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x30, 0x0a, 0x07, 0x66, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x66, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x5e, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c,
	0x6f, 0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x81, 0x04, 0x0a, 0x07, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x61, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x6b, 0x61, 0x6e, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x4b, 0x61, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x10, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x68, 0x69, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x68, 0x69, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6e, 0x6f, 0x76, 0x69, 0x6b, 0x6f, 0x66, 0x66, 0x2f, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_game_server_proto_rawDescOnce sync.Once
	file_public_game_server_proto_rawDescData = file_public_game_server_proto_rawDesc
)

func file_public_game_server_proto_rawDescGZIP() []byte {
	file_public_game_server_proto_rawDescOnce.Do(func() {
		file_public_game_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_game_server_proto_rawDescData)
	})
	return file_public_game_server_proto_rawDescData
}

var file_public_game_server_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_public_game_server_proto_goTypes = []interface{}{
	(*Server)(nil),                // 0: mahjong.game.Server
	(*RoundRecover)(nil),          // 1: mahjong.game.RoundRecover
	(*GameEndEvent)(nil),          // 2: mahjong.game.GameEndEvent
	(*GameStartEvent)(nil),        // 3: mahjong.game.GameStartEvent
	(*Suggest)(nil),               // 4: mahjong.game.Suggest
	(*log.TakeEvent)(nil),         // 5: mahjong.log.TakeEvent
	(*log.DropEvent)(nil),         // 6: mahjong.log.DropEvent
	(*log.ScoreChangesEvent)(nil), // 7: mahjong.log.ScoreChangesEvent
	(*log.SayEvent)(nil),          // 8: mahjong.log.SayEvent
	(*log.DeclareEvent)(nil),      // 9: mahjong.log.DeclareEvent
	(*log.WinEvent)(nil),          // 10: mahjong.log.WinEvent
	(*log.DrawEvent)(nil),         // 11: mahjong.log.DrawEvent
	(*log.IndicatorEvent)(nil),    // 12: mahjong.log.IndicatorEvent
	(*log.RoundInfo)(nil),         // 13: mahjong.log.RoundInfo
	(log.Furiten)(0),              // 14: mahjong.log.Furiten
	(*log.PlayerStatusEvent)(nil), // 15: mahjong.log.PlayerStatusEvent
	(*Settings)(nil),              // 16: mahjong.game.Settings
	(*log.Changes)(nil),           // 17: mahjong.log.Changes
	(log.GameEndReason)(0),        // 18: mahjong.log.GameEndReason
	(*log.GameInfo)(nil),          // 19: mahjong.log.GameInfo
	(*base.Instances)(nil),        // 20: mahjong.base.Instances
	(*duration.Duration)(nil),     // 21: google.protobuf.Duration
}
var file_public_game_server_proto_depIdxs = []int32{
	4,  // 0: mahjong.game.Server.suggest:type_name -> mahjong.game.Suggest
	5,  // 1: mahjong.game.Server.take:type_name -> mahjong.log.TakeEvent
	6,  // 2: mahjong.game.Server.drop:type_name -> mahjong.log.DropEvent
	7,  // 3: mahjong.game.Server.changes:type_name -> mahjong.log.ScoreChangesEvent
	8,  // 4: mahjong.game.Server.say:type_name -> mahjong.log.SayEvent
	9,  // 5: mahjong.game.Server.declare:type_name -> mahjong.log.DeclareEvent
	10, // 6: mahjong.game.Server.win:type_name -> mahjong.log.WinEvent
	11, // 7: mahjong.game.Server.draw:type_name -> mahjong.log.DrawEvent
	12, // 8: mahjong.game.Server.indicator:type_name -> mahjong.log.IndicatorEvent
	13, // 9: mahjong.game.Server.round_start:type_name -> mahjong.log.RoundInfo
	3,  // 10: mahjong.game.Server.game_start:type_name -> mahjong.game.GameStartEvent
	2,  // 11: mahjong.game.Server.game_end:type_name -> mahjong.game.GameEndEvent
	14, // 12: mahjong.game.Server.furiten:type_name -> mahjong.log.Furiten
	1,  // 13: mahjong.game.Server.recover:type_name -> mahjong.game.RoundRecover
	15, // 14: mahjong.game.Server.player_status:type_name -> mahjong.log.PlayerStatusEvent
	16, // 15: mahjong.game.Server.settings:type_name -> mahjong.game.Settings
	0,  // 16: mahjong.game.RoundRecover.events:type_name -> mahjong.game.Server
	17, // 17: mahjong.game.GameEndEvent.changes:type_name -> mahjong.log.Changes
	18, // 18: mahjong.game.GameEndEvent.end_reason:type_name -> mahjong.log.GameEndReason
	19, // 19: mahjong.game.GameStartEvent.info:type_name -> mahjong.log.GameInfo
	20, // 20: mahjong.game.Suggest.upgrade_instances:type_name -> mahjong.base.Instances
	21, // 21: mahjong.game.Suggest.timeout:type_name -> google.protobuf.Duration
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_public_game_server_proto_init() }
func file_public_game_server_proto_init() {
	if File_public_game_server_proto != nil {
		return
	}
	file_public_game_client_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_public_game_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_game_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_game_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_game_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_game_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suggest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_game_server_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Server_Take)(nil),
		(*Server_Drop)(nil),
		(*Server_Changes)(nil),
		(*Server_Say)(nil),
		(*Server_Declare)(nil),
		(*Server_Win)(nil),
		(*Server_Draw)(nil),
		(*Server_Indicator)(nil),
		(*Server_RoundStart)(nil),
		(*Server_GameStart)(nil),
		(*Server_GameEnd)(nil),
		(*Server_Furiten)(nil),
		(*Server_Recover)(nil),
		(*Server_PlayerStatus)(nil),
		(*Server_Settings)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_game_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_game_server_proto_goTypes,
		DependencyIndexes: file_public_game_server_proto_depIdxs,
		MessageInfos:      file_public_game_server_proto_msgTypes,
	}.Build()
	File_public_game_server_proto = out.File
	file_public_game_server_proto_rawDesc = nil
	file_public_game_server_proto_goTypes = nil
	file_public_game_server_proto_depIdxs = nil
}
