// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: public/log/events.proto

package log

import (
	base "github.com/dnovikoff/mahjong-api/genproto/public/base"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Furiten int32

const (
	Furiten_FURITEN_UNDEFINED Furiten = 0
	Furiten_FURITEN_NO        Furiten = 1
	Furiten_FURITEN_YES       Furiten = 2
)

// Enum value maps for Furiten.
var (
	Furiten_name = map[int32]string{
		0: "FURITEN_UNDEFINED",
		1: "FURITEN_NO",
		2: "FURITEN_YES",
	}
	Furiten_value = map[string]int32{
		"FURITEN_UNDEFINED": 0,
		"FURITEN_NO":        1,
		"FURITEN_YES":       2,
	}
)

func (x Furiten) Enum() *Furiten {
	p := new(Furiten)
	*p = x
	return p
}

func (x Furiten) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Furiten) Descriptor() protoreflect.EnumDescriptor {
	return file_public_log_events_proto_enumTypes[0].Descriptor()
}

func (Furiten) Type() protoreflect.EnumType {
	return &file_public_log_events_proto_enumTypes[0]
}

func (x Furiten) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Furiten.Descriptor instead.
func (Furiten) EnumDescriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{0}
}

type Say int32

const (
	Say_SAY_UNSPECIFIED Say = 0
	Say_RIICHI          Say = 1
	Say_RON             Say = 2
	Say_TSUMO           Say = 3
	// kisekuhai.
	Say_DRAW Say = 4
	Say_KAN  Say = 5
	Say_PON  Say = 6
	Say_CHI  Say = 7
	// Probably will be used later.
	Say_TEMPAI Say = 8
	Say_NOTEN  Say = 9
)

// Enum value maps for Say.
var (
	Say_name = map[int32]string{
		0: "SAY_UNSPECIFIED",
		1: "RIICHI",
		2: "RON",
		3: "TSUMO",
		4: "DRAW",
		5: "KAN",
		6: "PON",
		7: "CHI",
		8: "TEMPAI",
		9: "NOTEN",
	}
	Say_value = map[string]int32{
		"SAY_UNSPECIFIED": 0,
		"RIICHI":          1,
		"RON":             2,
		"TSUMO":           3,
		"DRAW":            4,
		"KAN":             5,
		"PON":             6,
		"CHI":             7,
		"TEMPAI":          8,
		"NOTEN":           9,
	}
)

func (x Say) Enum() *Say {
	p := new(Say)
	*p = x
	return p
}

func (x Say) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Say) Descriptor() protoreflect.EnumDescriptor {
	return file_public_log_events_proto_enumTypes[1].Descriptor()
}

func (Say) Type() protoreflect.EnumType {
	return &file_public_log_events_proto_enumTypes[1]
}

func (x Say) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Say.Descriptor instead.
func (Say) EnumDescriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{1}
}

type DrawReason int32

const (
	DrawReason_DRAW_UNSPECIFIED DrawReason = 0
	// Regular draw.
	DrawReason_REGULAR DrawReason = 1
	// Special discared at regular draw.
	DrawReason_NAGASHI DrawReason = 2
	// For winds first drop.
	DrawReason_WINDS DrawReason = 3
	// 9 different koksuhi tiles from start.
	DrawReason_KOKUSHI DrawReason = 4
	// 4 riichi declared.
	DrawReason_RIICHI4 DrawReason = 5
	// Ron from three players at a time.
	DrawReason_RON3 DrawReason = 6
	// For kans by different players declared.
	DrawReason_KAN4 DrawReason = 7
)

// Enum value maps for DrawReason.
var (
	DrawReason_name = map[int32]string{
		0: "DRAW_UNSPECIFIED",
		1: "REGULAR",
		2: "NAGASHI",
		3: "WINDS",
		4: "KOKUSHI",
		5: "RIICHI4",
		6: "RON3",
		7: "KAN4",
	}
	DrawReason_value = map[string]int32{
		"DRAW_UNSPECIFIED": 0,
		"REGULAR":          1,
		"NAGASHI":          2,
		"WINDS":            3,
		"KOKUSHI":          4,
		"RIICHI4":          5,
		"RON3":             6,
		"KAN4":             7,
	}
)

func (x DrawReason) Enum() *DrawReason {
	p := new(DrawReason)
	*p = x
	return p
}

func (x DrawReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrawReason) Descriptor() protoreflect.EnumDescriptor {
	return file_public_log_events_proto_enumTypes[2].Descriptor()
}

func (DrawReason) Type() protoreflect.EnumType {
	return &file_public_log_events_proto_enumTypes[2]
}

func (x DrawReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrawReason.Descriptor instead.
func (DrawReason) EnumDescriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{2}
}

type PlayerStauts int32

const (
	PlayerStauts_STATUS_UNDEFINED PlayerStauts = 0
	PlayerStauts_OFFLINE          PlayerStauts = 1
	PlayerStauts_ONLINE           PlayerStauts = 2
)

// Enum value maps for PlayerStauts.
var (
	PlayerStauts_name = map[int32]string{
		0: "STATUS_UNDEFINED",
		1: "OFFLINE",
		2: "ONLINE",
	}
	PlayerStauts_value = map[string]int32{
		"STATUS_UNDEFINED": 0,
		"OFFLINE":          1,
		"ONLINE":           2,
	}
)

func (x PlayerStauts) Enum() *PlayerStauts {
	p := new(PlayerStauts)
	*p = x
	return p
}

func (x PlayerStauts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStauts) Descriptor() protoreflect.EnumDescriptor {
	return file_public_log_events_proto_enumTypes[3].Descriptor()
}

func (PlayerStauts) Type() protoreflect.EnumType {
	return &file_public_log_events_proto_enumTypes[3]
}

func (x PlayerStauts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStauts.Descriptor instead.
func (PlayerStauts) EnumDescriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{3}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id to be used to point to some event in the game.
	EventId int64                `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Time    *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to OneofEvents:
	//	*Event_Take
	//	*Event_Drop
	//	*Event_Changes
	//	*Event_Say
	//	*Event_Declare
	//	*Event_Win
	//	*Event_Draw
	//	*Event_Indicator
	//	*Event_Furiten
	//	*Event_PlayerStatus
	OneofEvents isEvent_OneofEvents `protobuf_oneof:"oneof_events"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Event) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (m *Event) GetOneofEvents() isEvent_OneofEvents {
	if m != nil {
		return m.OneofEvents
	}
	return nil
}

func (x *Event) GetTake() *TakeEvent {
	if x, ok := x.GetOneofEvents().(*Event_Take); ok {
		return x.Take
	}
	return nil
}

func (x *Event) GetDrop() *DropEvent {
	if x, ok := x.GetOneofEvents().(*Event_Drop); ok {
		return x.Drop
	}
	return nil
}

func (x *Event) GetChanges() *ScoreChangesEvent {
	if x, ok := x.GetOneofEvents().(*Event_Changes); ok {
		return x.Changes
	}
	return nil
}

func (x *Event) GetSay() *SayEvent {
	if x, ok := x.GetOneofEvents().(*Event_Say); ok {
		return x.Say
	}
	return nil
}

func (x *Event) GetDeclare() *DeclareEvent {
	if x, ok := x.GetOneofEvents().(*Event_Declare); ok {
		return x.Declare
	}
	return nil
}

func (x *Event) GetWin() *WinEvent {
	if x, ok := x.GetOneofEvents().(*Event_Win); ok {
		return x.Win
	}
	return nil
}

func (x *Event) GetDraw() *DrawEvent {
	if x, ok := x.GetOneofEvents().(*Event_Draw); ok {
		return x.Draw
	}
	return nil
}

func (x *Event) GetIndicator() *IndicatorEvent {
	if x, ok := x.GetOneofEvents().(*Event_Indicator); ok {
		return x.Indicator
	}
	return nil
}

func (x *Event) GetFuriten() *FuritenEvent {
	if x, ok := x.GetOneofEvents().(*Event_Furiten); ok {
		return x.Furiten
	}
	return nil
}

func (x *Event) GetPlayerStatus() *PlayerStatusEvent {
	if x, ok := x.GetOneofEvents().(*Event_PlayerStatus); ok {
		return x.PlayerStatus
	}
	return nil
}

type isEvent_OneofEvents interface {
	isEvent_OneofEvents()
}

type Event_Take struct {
	Take *TakeEvent `protobuf:"bytes,3,opt,name=take,proto3,oneof"`
}

type Event_Drop struct {
	Drop *DropEvent `protobuf:"bytes,4,opt,name=drop,proto3,oneof"`
}

type Event_Changes struct {
	Changes *ScoreChangesEvent `protobuf:"bytes,5,opt,name=changes,proto3,oneof"`
}

type Event_Say struct {
	Say *SayEvent `protobuf:"bytes,6,opt,name=say,proto3,oneof"`
}

type Event_Declare struct {
	Declare *DeclareEvent `protobuf:"bytes,7,opt,name=declare,proto3,oneof"`
}

type Event_Win struct {
	Win *WinEvent `protobuf:"bytes,8,opt,name=win,proto3,oneof"`
}

type Event_Draw struct {
	Draw *DrawEvent `protobuf:"bytes,9,opt,name=draw,proto3,oneof"`
}

type Event_Indicator struct {
	Indicator *IndicatorEvent `protobuf:"bytes,10,opt,name=indicator,proto3,oneof"`
}

type Event_Furiten struct {
	Furiten *FuritenEvent `protobuf:"bytes,11,opt,name=furiten,proto3,oneof"`
}

type Event_PlayerStatus struct {
	PlayerStatus *PlayerStatusEvent `protobuf:"bytes,12,opt,name=player_status,json=playerStatus,proto3,oneof"`
}

func (*Event_Take) isEvent_OneofEvents() {}

func (*Event_Drop) isEvent_OneofEvents() {}

func (*Event_Changes) isEvent_OneofEvents() {}

func (*Event_Say) isEvent_OneofEvents() {}

func (*Event_Declare) isEvent_OneofEvents() {}

func (*Event_Win) isEvent_OneofEvents() {}

func (*Event_Draw) isEvent_OneofEvents() {}

func (*Event_Indicator) isEvent_OneofEvents() {}

func (*Event_Furiten) isEvent_OneofEvents() {}

func (*Event_PlayerStatus) isEvent_OneofEvents() {}

type FuritenEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhoIndex int64   `protobuf:"varint,1,opt,name=who_index,json=whoIndex,proto3" json:"who_index,omitempty"`
	Furiten  Furiten `protobuf:"varint,2,opt,name=furiten,proto3,enum=mahjong.log.Furiten" json:"furiten,omitempty"`
}

func (x *FuritenEvent) Reset() {
	*x = FuritenEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuritenEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuritenEvent) ProtoMessage() {}

func (x *FuritenEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuritenEvent.ProtoReflect.Descriptor instead.
func (*FuritenEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{1}
}

func (x *FuritenEvent) GetWhoIndex() int64 {
	if x != nil {
		return x.WhoIndex
	}
	return 0
}

func (x *FuritenEvent) GetFuriten() Furiten {
	if x != nil {
		return x.Furiten
	}
	return Furiten_FURITEN_UNDEFINED
}

type TakeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhoIndex int64 `protobuf:"varint,1,opt,name=who_index,json=whoIndex,proto3" json:"who_index,omitempty"`
	// Not filled in game, when other player takes a tile.
	Instance int64 `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// Is tile taken from a dead wall.
	DeadWall bool `protobuf:"varint,3,opt,name=dead_wall,json=deadWall,proto3" json:"dead_wall,omitempty"`
}

func (x *TakeEvent) Reset() {
	*x = TakeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeEvent) ProtoMessage() {}

func (x *TakeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeEvent.ProtoReflect.Descriptor instead.
func (*TakeEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{2}
}

func (x *TakeEvent) GetWhoIndex() int64 {
	if x != nil {
		return x.WhoIndex
	}
	return 0
}

func (x *TakeEvent) GetInstance() int64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *TakeEvent) GetDeadWall() bool {
	if x != nil {
		return x.DeadWall
	}
	return false
}

type DropEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhoIndex  int64 `protobuf:"varint,1,opt,name=who_index,json=whoIndex,proto3" json:"who_index,omitempty"`
	Instance  int64 `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Tsumogiri bool  `protobuf:"varint,3,opt,name=tsumogiri,proto3" json:"tsumogiri,omitempty"`
	Riichi    bool  `protobuf:"varint,4,opt,name=riichi,proto3" json:"riichi,omitempty"`
	// Filled only when tempai.
	// Will be filled only for self, when in game.
	// Will be filled in logs.
	// Not filled for other players in game.
	WaitTiles int64 `protobuf:"varint,5,opt,name=wait_tiles,json=waitTiles,proto3" json:"wait_tiles,omitempty"`
}

func (x *DropEvent) Reset() {
	*x = DropEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropEvent) ProtoMessage() {}

func (x *DropEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropEvent.ProtoReflect.Descriptor instead.
func (*DropEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{3}
}

func (x *DropEvent) GetWhoIndex() int64 {
	if x != nil {
		return x.WhoIndex
	}
	return 0
}

func (x *DropEvent) GetInstance() int64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *DropEvent) GetTsumogiri() bool {
	if x != nil {
		return x.Tsumogiri
	}
	return false
}

func (x *DropEvent) GetRiichi() bool {
	if x != nil {
		return x.Riichi
	}
	return false
}

func (x *DropEvent) GetWaitTiles() int64 {
	if x != nil {
		return x.WaitTiles
	}
	return 0
}

// Score changed by riichi
type ScoreChangesEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New number of total riichi sticks on table.
	RiichiCount int64 `protobuf:"varint,1,opt,name=riichi_count,json=riichiCount,proto3" json:"riichi_count,omitempty"`
	// New scores for every player.
	Changes *Changes `protobuf:"bytes,2,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ScoreChangesEvent) Reset() {
	*x = ScoreChangesEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreChangesEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreChangesEvent) ProtoMessage() {}

func (x *ScoreChangesEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreChangesEvent.ProtoReflect.Descriptor instead.
func (*ScoreChangesEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{4}
}

func (x *ScoreChangesEvent) GetRiichiCount() int64 {
	if x != nil {
		return x.RiichiCount
	}
	return 0
}

func (x *ScoreChangesEvent) GetChanges() *Changes {
	if x != nil {
		return x.Changes
	}
	return nil
}

type SayEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhoIndex int64 `protobuf:"varint,1,opt,name=who_index,json=whoIndex,proto3" json:"who_index,omitempty"`
	What     Say   `protobuf:"varint,2,opt,name=what,proto3,enum=mahjong.log.Say" json:"what,omitempty"`
}

func (x *SayEvent) Reset() {
	*x = SayEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SayEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SayEvent) ProtoMessage() {}

func (x *SayEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SayEvent.ProtoReflect.Descriptor instead.
func (*SayEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{5}
}

func (x *SayEvent) GetWhoIndex() int64 {
	if x != nil {
		return x.WhoIndex
	}
	return 0
}

func (x *SayEvent) GetWhat() Say {
	if x != nil {
		return x.What
	}
	return Say_SAY_UNSPECIFIED
}

type DeclareEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhoIndex int64      `protobuf:"varint,1,opt,name=who_index,json=whoIndex,proto3" json:"who_index,omitempty"`
	Meld     *base.Meld `protobuf:"bytes,2,opt,name=meld,proto3" json:"meld,omitempty"`
}

func (x *DeclareEvent) Reset() {
	*x = DeclareEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareEvent) ProtoMessage() {}

func (x *DeclareEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareEvent.ProtoReflect.Descriptor instead.
func (*DeclareEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{6}
}

func (x *DeclareEvent) GetWhoIndex() int64 {
	if x != nil {
		return x.WhoIndex
	}
	return 0
}

func (x *DeclareEvent) GetMeld() *base.Meld {
	if x != nil {
		return x.Meld
	}
	return nil
}

type YakuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Han  int64             `protobuf:"varint,1,opt,name=han,proto3" json:"han,omitempty"`
	Fu   int64             `protobuf:"varint,2,opt,name=fu,proto3" json:"fu,omitempty"`
	Yaku []*base.YakuValue `protobuf:"bytes,3,rep,name=yaku,proto3" json:"yaku,omitempty"`
}

func (x *YakuInfo) Reset() {
	*x = YakuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakuInfo) ProtoMessage() {}

func (x *YakuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakuInfo.ProtoReflect.Descriptor instead.
func (*YakuInfo) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{7}
}

func (x *YakuInfo) GetHan() int64 {
	if x != nil {
		return x.Han
	}
	return 0
}

func (x *YakuInfo) GetFu() int64 {
	if x != nil {
		return x.Fu
	}
	return 0
}

func (x *YakuInfo) GetYaku() []*base.YakuValue {
	if x != nil {
		return x.Yaku
	}
	return nil
}

type YakumanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yakuman []*base.YakumanValue `protobuf:"bytes,1,rep,name=yakuman,proto3" json:"yakuman,omitempty"`
}

func (x *YakumanInfo) Reset() {
	*x = YakumanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakumanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakumanInfo) ProtoMessage() {}

func (x *YakumanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakumanInfo.ProtoReflect.Descriptor instead.
func (*YakumanInfo) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{8}
}

func (x *YakumanInfo) GetYakuman() []*base.YakumanValue {
	if x != nil {
		return x.Yakuman
	}
	return nil
}

type WinEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If from == who - this is tsumo
	WhoIndex       int64           `protobuf:"varint,1,opt,name=who_index,json=whoIndex,proto3" json:"who_index,omitempty"`
	FromIndex      int64           `protobuf:"varint,2,opt,name=from_index,json=fromIndex,proto3" json:"from_index,omitempty"`
	Instance       int64           `protobuf:"varint,3,opt,name=instance,proto3" json:"instance,omitempty"`
	Hand           *base.Instances `protobuf:"bytes,4,opt,name=hand,proto3" json:"hand,omitempty"`
	Declared       []*base.Meld    `protobuf:"bytes,5,rep,name=declared,proto3" json:"declared,omitempty"`
	DoraIndicators *base.Instances `protobuf:"bytes,6,opt,name=dora_indicators,json=doraIndicators,proto3" json:"dora_indicators,omitempty"`
	UraIndicators  *base.Instances `protobuf:"bytes,7,opt,name=ura_indicators,json=uraIndicators,proto3" json:"ura_indicators,omitempty"`
	Limit          base.Limit      `protobuf:"varint,8,opt,name=limit,proto3,enum=mahjong.base.Limit" json:"limit,omitempty"`
	// Types that are assignable to OneofWinInfo:
	//	*WinEvent_Yaku
	//	*WinEvent_Yakuman
	OneofWinInfo isWinEvent_OneofWinInfo `protobuf_oneof:"oneof_win_info"`
	BaseMoney    int64                   `protobuf:"varint,11,opt,name=base_money,json=baseMoney,proto3" json:"base_money,omitempty"`
	Changes      *Changes                `protobuf:"bytes,12,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *WinEvent) Reset() {
	*x = WinEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinEvent) ProtoMessage() {}

func (x *WinEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinEvent.ProtoReflect.Descriptor instead.
func (*WinEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{9}
}

func (x *WinEvent) GetWhoIndex() int64 {
	if x != nil {
		return x.WhoIndex
	}
	return 0
}

func (x *WinEvent) GetFromIndex() int64 {
	if x != nil {
		return x.FromIndex
	}
	return 0
}

func (x *WinEvent) GetInstance() int64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *WinEvent) GetHand() *base.Instances {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *WinEvent) GetDeclared() []*base.Meld {
	if x != nil {
		return x.Declared
	}
	return nil
}

func (x *WinEvent) GetDoraIndicators() *base.Instances {
	if x != nil {
		return x.DoraIndicators
	}
	return nil
}

func (x *WinEvent) GetUraIndicators() *base.Instances {
	if x != nil {
		return x.UraIndicators
	}
	return nil
}

func (x *WinEvent) GetLimit() base.Limit {
	if x != nil {
		return x.Limit
	}
	return base.Limit_LIMIT_UNSPECIFIED
}

func (m *WinEvent) GetOneofWinInfo() isWinEvent_OneofWinInfo {
	if m != nil {
		return m.OneofWinInfo
	}
	return nil
}

func (x *WinEvent) GetYaku() *YakuInfo {
	if x, ok := x.GetOneofWinInfo().(*WinEvent_Yaku); ok {
		return x.Yaku
	}
	return nil
}

func (x *WinEvent) GetYakuman() *YakumanInfo {
	if x, ok := x.GetOneofWinInfo().(*WinEvent_Yakuman); ok {
		return x.Yakuman
	}
	return nil
}

func (x *WinEvent) GetBaseMoney() int64 {
	if x != nil {
		return x.BaseMoney
	}
	return 0
}

func (x *WinEvent) GetChanges() *Changes {
	if x != nil {
		return x.Changes
	}
	return nil
}

type isWinEvent_OneofWinInfo interface {
	isWinEvent_OneofWinInfo()
}

type WinEvent_Yaku struct {
	Yaku *YakuInfo `protobuf:"bytes,9,opt,name=yaku,proto3,oneof"`
}

type WinEvent_Yakuman struct {
	Yakuman *YakumanInfo `protobuf:"bytes,10,opt,name=yakuman,proto3,oneof"`
}

func (*WinEvent_Yaku) isWinEvent_OneofWinInfo() {}

func (*WinEvent_Yakuman) isWinEvent_OneofWinInfo() {}

type DrawEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Visible hands of players.
	// For kusukuhai and tempai.
	Hands   []*base.Instances `protobuf:"bytes,1,rep,name=hands,proto3" json:"hands,omitempty"`
	Reason  DrawReason        `protobuf:"varint,2,opt,name=reason,proto3,enum=mahjong.log.DrawReason" json:"reason,omitempty"`
	Changes *Changes          `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *DrawEvent) Reset() {
	*x = DrawEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawEvent) ProtoMessage() {}

func (x *DrawEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawEvent.ProtoReflect.Descriptor instead.
func (*DrawEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{10}
}

func (x *DrawEvent) GetHands() []*base.Instances {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *DrawEvent) GetReason() DrawReason {
	if x != nil {
		return x.Reason
	}
	return DrawReason_DRAW_UNSPECIFIED
}

func (x *DrawEvent) GetChanges() *Changes {
	if x != nil {
		return x.Changes
	}
	return nil
}

type PlayerStatusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhoIndex int64        `protobuf:"varint,1,opt,name=who_index,json=whoIndex,proto3" json:"who_index,omitempty"`
	Status   PlayerStauts `protobuf:"varint,2,opt,name=status,proto3,enum=mahjong.log.PlayerStauts" json:"status,omitempty"`
}

func (x *PlayerStatusEvent) Reset() {
	*x = PlayerStatusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusEvent) ProtoMessage() {}

func (x *PlayerStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusEvent.ProtoReflect.Descriptor instead.
func (*PlayerStatusEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerStatusEvent) GetWhoIndex() int64 {
	if x != nil {
		return x.WhoIndex
	}
	return 0
}

func (x *PlayerStatusEvent) GetStatus() PlayerStauts {
	if x != nil {
		return x.Status
	}
	return PlayerStauts_STATUS_UNDEFINED
}

type IndicatorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance int64 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *IndicatorEvent) Reset() {
	*x = IndicatorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorEvent) ProtoMessage() {}

func (x *IndicatorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorEvent.ProtoReflect.Descriptor instead.
func (*IndicatorEvent) Descriptor() ([]byte, []int) {
	return file_public_log_events_proto_rawDescGZIP(), []int{12}
}

func (x *IndicatorEvent) GetInstance() int64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

var File_public_log_events_proto protoreflect.FileDescriptor

var file_public_log_events_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x79, 0x61, 0x6b,
	0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x6c, 0x6f, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf0, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x6f,
	0x70, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x03, 0x73, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12,
	0x29, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x57, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x66, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x66, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f,
	0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x0c, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x68, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2e, 0x0a, 0x07, 0x66, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e,
	0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x52, 0x07, 0x66, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e,
	0x22, 0x61, 0x0a, 0x09, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x68, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x77, 0x68, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x68, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x73,
	0x75, 0x6d, 0x6f, 0x67, 0x69, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74,
	0x73, 0x75, 0x6d, 0x6f, 0x67, 0x69, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x69, 0x63,
	0x68, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x66, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x69, 0x69, 0x63,
	0x68, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x68, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x04, 0x77, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x61, 0x79,
	0x52, 0x04, 0x77, 0x68, 0x61, 0x74, 0x22, 0x53, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x68, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x6c, 0x64, 0x52, 0x04, 0x6d, 0x65, 0x6c, 0x64, 0x22, 0x59, 0x0a, 0x08, 0x59,
	0x61, 0x6b, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x68, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x66, 0x75, 0x12, 0x2b, 0x0a, 0x04, 0x79, 0x61, 0x6b,
	0x75, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x79, 0x61, 0x6b, 0x75, 0x22, 0x43, 0x0a, 0x0b, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x22, 0xb0, 0x04, 0x0a, 0x08,
	0x57, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x68, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d,
	0x65, 0x6c, 0x64, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x0f, 0x64, 0x6f, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x0e, 0x64, 0x6f, 0x72, 0x61, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x3e, 0x0a, 0x0e, 0x75, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x0d, 0x75, 0x72, 0x61, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x79, 0x61,
	0x6b, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x04, 0x79, 0x61, 0x6b, 0x75, 0x12, 0x34, 0x0a, 0x07, 0x79, 0x61, 0x6b, 0x75, 0x6d,
	0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9b,
	0x01, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x11,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x68, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x68, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x75, 0x74, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2c, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2a,
	0x41, 0x0a, 0x07, 0x46, 0x75, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x55,
	0x52, 0x49, 0x54, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x52, 0x49, 0x54, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x55, 0x52, 0x49, 0x54, 0x45, 0x4e, 0x5f, 0x59, 0x45, 0x53,
	0x10, 0x02, 0x2a, 0x76, 0x0a, 0x03, 0x53, 0x61, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x49, 0x49, 0x43, 0x48, 0x49, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x53, 0x55, 0x4d, 0x4f, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x44, 0x52, 0x41, 0x57, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x41, 0x4e, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48,
	0x49, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x49, 0x10, 0x08, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x54, 0x45, 0x4e, 0x10, 0x09, 0x2a, 0x75, 0x0a, 0x0a, 0x44, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x52, 0x41, 0x57,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x41, 0x47, 0x41, 0x53, 0x48, 0x49, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49, 0x4e, 0x44,
	0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x4f, 0x4b, 0x55, 0x53, 0x48, 0x49, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x49, 0x49, 0x43, 0x48, 0x49, 0x34, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x4f, 0x4e, 0x33, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x41, 0x4e, 0x34, 0x10,
	0x07, 0x2a, 0x3d, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x75, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02,
	0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6e, 0x6f, 0x76, 0x69, 0x6b, 0x6f, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_log_events_proto_rawDescOnce sync.Once
	file_public_log_events_proto_rawDescData = file_public_log_events_proto_rawDesc
)

func file_public_log_events_proto_rawDescGZIP() []byte {
	file_public_log_events_proto_rawDescOnce.Do(func() {
		file_public_log_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_log_events_proto_rawDescData)
	})
	return file_public_log_events_proto_rawDescData
}

var file_public_log_events_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_public_log_events_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_public_log_events_proto_goTypes = []interface{}{
	(Furiten)(0),                // 0: mahjong.log.Furiten
	(Say)(0),                    // 1: mahjong.log.Say
	(DrawReason)(0),             // 2: mahjong.log.DrawReason
	(PlayerStauts)(0),           // 3: mahjong.log.PlayerStauts
	(*Event)(nil),               // 4: mahjong.log.Event
	(*FuritenEvent)(nil),        // 5: mahjong.log.FuritenEvent
	(*TakeEvent)(nil),           // 6: mahjong.log.TakeEvent
	(*DropEvent)(nil),           // 7: mahjong.log.DropEvent
	(*ScoreChangesEvent)(nil),   // 8: mahjong.log.ScoreChangesEvent
	(*SayEvent)(nil),            // 9: mahjong.log.SayEvent
	(*DeclareEvent)(nil),        // 10: mahjong.log.DeclareEvent
	(*YakuInfo)(nil),            // 11: mahjong.log.YakuInfo
	(*YakumanInfo)(nil),         // 12: mahjong.log.YakumanInfo
	(*WinEvent)(nil),            // 13: mahjong.log.WinEvent
	(*DrawEvent)(nil),           // 14: mahjong.log.DrawEvent
	(*PlayerStatusEvent)(nil),   // 15: mahjong.log.PlayerStatusEvent
	(*IndicatorEvent)(nil),      // 16: mahjong.log.IndicatorEvent
	(*timestamp.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*Changes)(nil),             // 18: mahjong.log.Changes
	(*base.Meld)(nil),           // 19: mahjong.base.Meld
	(*base.YakuValue)(nil),      // 20: mahjong.base.YakuValue
	(*base.YakumanValue)(nil),   // 21: mahjong.base.YakumanValue
	(*base.Instances)(nil),      // 22: mahjong.base.Instances
	(base.Limit)(0),             // 23: mahjong.base.Limit
}
var file_public_log_events_proto_depIdxs = []int32{
	17, // 0: mahjong.log.Event.time:type_name -> google.protobuf.Timestamp
	6,  // 1: mahjong.log.Event.take:type_name -> mahjong.log.TakeEvent
	7,  // 2: mahjong.log.Event.drop:type_name -> mahjong.log.DropEvent
	8,  // 3: mahjong.log.Event.changes:type_name -> mahjong.log.ScoreChangesEvent
	9,  // 4: mahjong.log.Event.say:type_name -> mahjong.log.SayEvent
	10, // 5: mahjong.log.Event.declare:type_name -> mahjong.log.DeclareEvent
	13, // 6: mahjong.log.Event.win:type_name -> mahjong.log.WinEvent
	14, // 7: mahjong.log.Event.draw:type_name -> mahjong.log.DrawEvent
	16, // 8: mahjong.log.Event.indicator:type_name -> mahjong.log.IndicatorEvent
	5,  // 9: mahjong.log.Event.furiten:type_name -> mahjong.log.FuritenEvent
	15, // 10: mahjong.log.Event.player_status:type_name -> mahjong.log.PlayerStatusEvent
	0,  // 11: mahjong.log.FuritenEvent.furiten:type_name -> mahjong.log.Furiten
	18, // 12: mahjong.log.ScoreChangesEvent.changes:type_name -> mahjong.log.Changes
	1,  // 13: mahjong.log.SayEvent.what:type_name -> mahjong.log.Say
	19, // 14: mahjong.log.DeclareEvent.meld:type_name -> mahjong.base.Meld
	20, // 15: mahjong.log.YakuInfo.yaku:type_name -> mahjong.base.YakuValue
	21, // 16: mahjong.log.YakumanInfo.yakuman:type_name -> mahjong.base.YakumanValue
	22, // 17: mahjong.log.WinEvent.hand:type_name -> mahjong.base.Instances
	19, // 18: mahjong.log.WinEvent.declared:type_name -> mahjong.base.Meld
	22, // 19: mahjong.log.WinEvent.dora_indicators:type_name -> mahjong.base.Instances
	22, // 20: mahjong.log.WinEvent.ura_indicators:type_name -> mahjong.base.Instances
	23, // 21: mahjong.log.WinEvent.limit:type_name -> mahjong.base.Limit
	11, // 22: mahjong.log.WinEvent.yaku:type_name -> mahjong.log.YakuInfo
	12, // 23: mahjong.log.WinEvent.yakuman:type_name -> mahjong.log.YakumanInfo
	18, // 24: mahjong.log.WinEvent.changes:type_name -> mahjong.log.Changes
	22, // 25: mahjong.log.DrawEvent.hands:type_name -> mahjong.base.Instances
	2,  // 26: mahjong.log.DrawEvent.reason:type_name -> mahjong.log.DrawReason
	18, // 27: mahjong.log.DrawEvent.changes:type_name -> mahjong.log.Changes
	3,  // 28: mahjong.log.PlayerStatusEvent.status:type_name -> mahjong.log.PlayerStauts
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_public_log_events_proto_init() }
func file_public_log_events_proto_init() {
	if File_public_log_events_proto != nil {
		return
	}
	file_public_log_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_public_log_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuritenEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreChangesEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SayEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakumanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_log_events_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_Take)(nil),
		(*Event_Drop)(nil),
		(*Event_Changes)(nil),
		(*Event_Say)(nil),
		(*Event_Declare)(nil),
		(*Event_Win)(nil),
		(*Event_Draw)(nil),
		(*Event_Indicator)(nil),
		(*Event_Furiten)(nil),
		(*Event_PlayerStatus)(nil),
	}
	file_public_log_events_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*WinEvent_Yaku)(nil),
		(*WinEvent_Yakuman)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_log_events_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_log_events_proto_goTypes,
		DependencyIndexes: file_public_log_events_proto_depIdxs,
		EnumInfos:         file_public_log_events_proto_enumTypes,
		MessageInfos:      file_public_log_events_proto_msgTypes,
	}.Build()
	File_public_log_events_proto = out.File
	file_public_log_events_proto_rawDesc = nil
	file_public_log_events_proto_goTypes = nil
	file_public_log_events_proto_depIdxs = nil
}
