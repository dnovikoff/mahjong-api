// Code generated by protoc-gen-go. DO NOT EDIT.
// source: public/log/log.proto

package log

import (
	fmt "fmt"
	base "github.com/dnovikoff/mahjong-api/genproto/public/base"
	rules "github.com/dnovikoff/mahjong-api/genproto/public/rules"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// All game reasons applied if only specified by rules.
type GameEndReason int32

const (
	GameEndReason_GAME_END_REASON_UNSPECIFIED GameEndReason = 0
	// All conditions are ok.
	GameEndReason_NORMAL GameEndReason = 1
	// One of players have less than zero points.
	GameEndReason_BANCROCITY GameEndReason = 2
	// Maximum possible wind played with non of player got required points to win.
	GameEndReason_MAX_WIND GameEndReason = 3
	// Dealer is first in orasu.
	GameEndReason_AGARI_YAME GameEndReason = 4
	// For some time-limited tournaments.
	GameEndReason_TIMEOUT GameEndReason = 5
)

var GameEndReason_name = map[int32]string{
	0: "GAME_END_REASON_UNSPECIFIED",
	1: "NORMAL",
	2: "BANCROCITY",
	3: "MAX_WIND",
	4: "AGARI_YAME",
	5: "TIMEOUT",
}

var GameEndReason_value = map[string]int32{
	"GAME_END_REASON_UNSPECIFIED": 0,
	"NORMAL":                      1,
	"BANCROCITY":                  2,
	"MAX_WIND":                    3,
	"AGARI_YAME":                  4,
	"TIMEOUT":                     5,
}

func (x GameEndReason) String() string {
	return proto.EnumName(GameEndReason_name, int32(x))
}

func (GameEndReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{0}
}

type RoundEndReason int32

const (
	RoundEndReason_Round_END_REASON_UNSPECIFIED RoundEndReason = 0
	RoundEndReason_REASON_RON                   RoundEndReason = 1
	RoundEndReason_REASON_TSUMO                 RoundEndReason = 2
	// Game ended at last tile.
	RoundEndReason_REASON_REGULAR_DRAW RoundEndReason = 3
	// This is when game ended by special rule, ex. 4 riichi
	RoundEndReason_REASON_DRAW RoundEndReason = 4
)

var RoundEndReason_name = map[int32]string{
	0: "Round_END_REASON_UNSPECIFIED",
	1: "REASON_RON",
	2: "REASON_TSUMO",
	3: "REASON_REGULAR_DRAW",
	4: "REASON_DRAW",
}

var RoundEndReason_value = map[string]int32{
	"Round_END_REASON_UNSPECIFIED": 0,
	"REASON_RON":                   1,
	"REASON_TSUMO":                 2,
	"REASON_REGULAR_DRAW":          3,
	"REASON_DRAW":                  4,
}

func (x RoundEndReason) String() string {
	return proto.EnumName(RoundEndReason_name, int32(x))
}

func (RoundEndReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{1}
}

type Log struct {
	Info   *GameInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Rounds []*Round  `protobuf:"bytes,2,rep,name=rounds,proto3" json:"rounds,omitempty"`
	// Uma+Oka changes.
	Changes              *Changes             `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
	Started              *timestamp.Timestamp `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty"`
	Ended                *timestamp.Timestamp `protobuf:"bytes,5,opt,name=ended,proto3" json:"ended,omitempty"`
	EndReason            GameEndReason        `protobuf:"varint,6,opt,name=end_reason,json=endReason,proto3,enum=mahjong.log.GameEndReason" json:"end_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{0}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetInfo() *GameInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Log) GetRounds() []*Round {
	if m != nil {
		return m.Rounds
	}
	return nil
}

func (m *Log) GetChanges() *Changes {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *Log) GetStarted() *timestamp.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *Log) GetEnded() *timestamp.Timestamp {
	if m != nil {
		return m.Ended
	}
	return nil
}

func (m *Log) GetEndReason() GameEndReason {
	if m != nil {
		return m.EndReason
	}
	return GameEndReason_GAME_END_REASON_UNSPECIFIED
}

type GameInfo struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Players              []*Player       `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Rules                *rules.Ruleset  `protobuf:"bytes,3,opt,name=rules,proto3" json:"rules,omitempty"`
	Timeouts             *rules.Timeouts `protobuf:"bytes,4,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GameInfo) Reset()         { *m = GameInfo{} }
func (m *GameInfo) String() string { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()    {}
func (*GameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{1}
}

func (m *GameInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameInfo.Unmarshal(m, b)
}
func (m *GameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameInfo.Marshal(b, m, deterministic)
}
func (m *GameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInfo.Merge(m, src)
}
func (m *GameInfo) XXX_Size() int {
	return xxx_messageInfo_GameInfo.Size(m)
}
func (m *GameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameInfo proto.InternalMessageInfo

func (m *GameInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GameInfo) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameInfo) GetRules() *rules.Ruleset {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *GameInfo) GetTimeouts() *rules.Timeouts {
	if m != nil {
		return m.Timeouts
	}
	return nil
}

// Represents starting tile positions.
type Wall struct {
	Wall    *base.Instances `protobuf:"bytes,1,opt,name=wall,proto3" json:"wall,omitempty"`
	Dora    *base.Instances `protobuf:"bytes,2,opt,name=dora,proto3" json:"dora,omitempty"`
	Ura     *base.Instances `protobuf:"bytes,3,opt,name=ura,proto3" json:"ura,omitempty"`
	Rinshan *base.Instances `protobuf:"bytes,4,opt,name=rinshan,proto3" json:"rinshan,omitempty"`
	// Hands for 4 players;
	Hands []*base.Instances `protobuf:"bytes,5,rep,name=hands,proto3" json:"hands,omitempty"`
	// To detect ex. seed.
	WallId string `protobuf:"bytes,6,opt,name=wall_id,json=wallId,proto3" json:"wall_id,omitempty"`
	// 2 numbers 1-6, representing dices.
	// Used only for UI representations.
	// Have no impact on a game.
	// Could be empty.
	Dice                 []int64  `protobuf:"varint,7,rep,packed,name=dice,proto3" json:"dice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wall) Reset()         { *m = Wall{} }
func (m *Wall) String() string { return proto.CompactTextString(m) }
func (*Wall) ProtoMessage()    {}
func (*Wall) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{2}
}

func (m *Wall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wall.Unmarshal(m, b)
}
func (m *Wall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wall.Marshal(b, m, deterministic)
}
func (m *Wall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wall.Merge(m, src)
}
func (m *Wall) XXX_Size() int {
	return xxx_messageInfo_Wall.Size(m)
}
func (m *Wall) XXX_DiscardUnknown() {
	xxx_messageInfo_Wall.DiscardUnknown(m)
}

var xxx_messageInfo_Wall proto.InternalMessageInfo

func (m *Wall) GetWall() *base.Instances {
	if m != nil {
		return m.Wall
	}
	return nil
}

func (m *Wall) GetDora() *base.Instances {
	if m != nil {
		return m.Dora
	}
	return nil
}

func (m *Wall) GetUra() *base.Instances {
	if m != nil {
		return m.Ura
	}
	return nil
}

func (m *Wall) GetRinshan() *base.Instances {
	if m != nil {
		return m.Rinshan
	}
	return nil
}

func (m *Wall) GetHands() []*base.Instances {
	if m != nil {
		return m.Hands
	}
	return nil
}

func (m *Wall) GetWallId() string {
	if m != nil {
		return m.WallId
	}
	return ""
}

func (m *Wall) GetDice() []int64 {
	if m != nil {
		return m.Dice
	}
	return nil
}

type Round struct {
	Info                 *RoundInfo   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Events               []*Event     `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	Result               *RoundResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{3}
}

func (m *Round) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Round.Unmarshal(m, b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Round.Marshal(b, m, deterministic)
}
func (m *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(m, src)
}
func (m *Round) XXX_Size() int {
	return xxx_messageInfo_Round.Size(m)
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetInfo() *RoundInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Round) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Round) GetResult() *RoundResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type RoundResult struct {
	// Resulting changes, calculated from money at the start of the round to the end of all payments done
	Changes *Changes `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
	// Riichi sticks on the table at the end of the round and afer all payments
	RiichiCount          int64          `protobuf:"varint,2,opt,name=riichi_count,json=riichiCount,proto3" json:"riichi_count,omitempty"`
	EndReason            RoundEndReason `protobuf:"varint,3,opt,name=end_reason,json=endReason,proto3,enum=mahjong.log.RoundEndReason" json:"end_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RoundResult) Reset()         { *m = RoundResult{} }
func (m *RoundResult) String() string { return proto.CompactTextString(m) }
func (*RoundResult) ProtoMessage()    {}
func (*RoundResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{4}
}

func (m *RoundResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundResult.Unmarshal(m, b)
}
func (m *RoundResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundResult.Marshal(b, m, deterministic)
}
func (m *RoundResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundResult.Merge(m, src)
}
func (m *RoundResult) XXX_Size() int {
	return xxx_messageInfo_RoundResult.Size(m)
}
func (m *RoundResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundResult.DiscardUnknown(m)
}

var xxx_messageInfo_RoundResult proto.InternalMessageInfo

func (m *RoundResult) GetChanges() *Changes {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *RoundResult) GetRiichiCount() int64 {
	if m != nil {
		return m.RiichiCount
	}
	return 0
}

func (m *RoundResult) GetEndReason() RoundEndReason {
	if m != nil {
		return m.EndReason
	}
	return RoundEndReason_Round_END_REASON_UNSPECIFIED
}

type RoundInfo struct {
	// 1-4 East, 5-8 South, 9-12 West, 13-16 North
	// Dealer calculated according to this number.
	RoundNumber int64 `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	// Number of riichi sticks at the moment of round starts.
	RiichiCount  int64 `protobuf:"varint,2,opt,name=riichi_count,json=riichiCount,proto3" json:"riichi_count,omitempty"`
	RenchanCount int64 `protobuf:"varint,3,opt,name=renchan_count,json=renchanCount,proto3" json:"renchan_count,omitempty"`
	// Player point at the moment of round starts.
	Money                []int64  `protobuf:"zigzag64,4,rep,packed,name=money,proto3" json:"money,omitempty"`
	Wall                 *Wall    `protobuf:"bytes,5,opt,name=wall,proto3" json:"wall,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundInfo) Reset()         { *m = RoundInfo{} }
func (m *RoundInfo) String() string { return proto.CompactTextString(m) }
func (*RoundInfo) ProtoMessage()    {}
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{5}
}

func (m *RoundInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundInfo.Unmarshal(m, b)
}
func (m *RoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundInfo.Marshal(b, m, deterministic)
}
func (m *RoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundInfo.Merge(m, src)
}
func (m *RoundInfo) XXX_Size() int {
	return xxx_messageInfo_RoundInfo.Size(m)
}
func (m *RoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoundInfo proto.InternalMessageInfo

func (m *RoundInfo) GetRoundNumber() int64 {
	if m != nil {
		return m.RoundNumber
	}
	return 0
}

func (m *RoundInfo) GetRiichiCount() int64 {
	if m != nil {
		return m.RiichiCount
	}
	return 0
}

func (m *RoundInfo) GetRenchanCount() int64 {
	if m != nil {
		return m.RenchanCount
	}
	return 0
}

func (m *RoundInfo) GetMoney() []int64 {
	if m != nil {
		return m.Money
	}
	return nil
}

func (m *RoundInfo) GetWall() *Wall {
	if m != nil {
		return m.Wall
	}
	return nil
}

type Player struct {
	// Player name, visible at the client.
	Caption              string   `protobuf:"bytes,1,opt,name=caption,proto3" json:"caption,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb2a18b73330e25f, []int{6}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func init() {
	proto.RegisterEnum("mahjong.log.GameEndReason", GameEndReason_name, GameEndReason_value)
	proto.RegisterEnum("mahjong.log.RoundEndReason", RoundEndReason_name, RoundEndReason_value)
	proto.RegisterType((*Log)(nil), "mahjong.log.Log")
	proto.RegisterType((*GameInfo)(nil), "mahjong.log.GameInfo")
	proto.RegisterType((*Wall)(nil), "mahjong.log.Wall")
	proto.RegisterType((*Round)(nil), "mahjong.log.Round")
	proto.RegisterType((*RoundResult)(nil), "mahjong.log.RoundResult")
	proto.RegisterType((*RoundInfo)(nil), "mahjong.log.RoundInfo")
	proto.RegisterType((*Player)(nil), "mahjong.log.Player")
}

func init() { proto.RegisterFile("public/log/log.proto", fileDescriptor_bb2a18b73330e25f) }

var fileDescriptor_bb2a18b73330e25f = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xdf, 0x6e, 0xdb, 0x36,
	0x14, 0xc6, 0x27, 0xcb, 0x7f, 0x92, 0xe3, 0x34, 0xd3, 0x4e, 0xb3, 0x44, 0x48, 0x07, 0xd4, 0xf3,
	0x30, 0xc0, 0xcd, 0x16, 0xb9, 0x4b, 0x8b, 0x01, 0xdb, 0x9d, 0xea, 0x68, 0x81, 0x80, 0xd8, 0x2e,
	0x18, 0x07, 0x59, 0x77, 0x23, 0xc8, 0x12, 0x2d, 0x6b, 0x93, 0x48, 0x43, 0x7f, 0x5a, 0xf4, 0x66,
	0xef, 0xb0, 0xdb, 0x61, 0x8f, 0x30, 0x60, 0x17, 0x7b, 0xc1, 0x82, 0x14, 0x95, 0x46, 0x4d, 0x82,
	0xf6, 0x22, 0x82, 0x78, 0xbe, 0x1f, 0x45, 0xf2, 0xe3, 0x77, 0x62, 0xd8, 0xdb, 0x94, 0xcb, 0x24,
	0x0e, 0xc6, 0x09, 0x8f, 0xc4, 0x9f, 0xb5, 0xc9, 0x78, 0xc1, 0xb1, 0x9f, 0xfa, 0xeb, 0xdf, 0x39,
	0x8b, 0xac, 0x84, 0x47, 0x87, 0x8f, 0x23, 0xce, 0xa3, 0x84, 0x8e, 0xa5, 0xb4, 0x2c, 0x57, 0xe3,
	0x22, 0x4e, 0x69, 0x5e, 0xf8, 0xe9, 0xa6, 0xa2, 0x0f, 0xf7, 0xd5, 0x37, 0x96, 0x7e, 0x4e, 0xe5,
	0x43, 0xd5, 0x4d, 0x55, 0xcf, 0xca, 0x84, 0xe6, 0xd5, 0x53, 0x29, 0x07, 0x37, 0x56, 0xa5, 0xaf,
	0x29, 0x2b, 0xee, 0x12, 0x02, 0x9e, 0xa6, 0x9c, 0x55, 0xc2, 0xf0, 0xbf, 0x16, 0xe8, 0xe7, 0x3c,
	0xc2, 0x27, 0xd0, 0x8e, 0xd9, 0x8a, 0x9b, 0xda, 0x40, 0x1b, 0xf5, 0x4f, 0xbe, 0xb4, 0x6e, 0x6c,
	0xd4, 0x3a, 0xf3, 0x53, 0xea, 0xb2, 0x15, 0x27, 0x12, 0xc1, 0x23, 0xe8, 0x66, 0xbc, 0x64, 0x61,
	0x6e, 0xb6, 0x06, 0xfa, 0xa8, 0x7f, 0x82, 0x0d, 0x98, 0x08, 0x89, 0x28, 0x02, 0x2d, 0xe8, 0x05,
	0x6b, 0x9f, 0x45, 0x34, 0x37, 0x75, 0xf9, 0xe5, 0xbd, 0x06, 0x3c, 0xa9, 0x34, 0x52, 0x43, 0xf8,
	0x1c, 0x7a, 0x79, 0xe1, 0x67, 0x05, 0x0d, 0xcd, 0xb6, 0xe4, 0x0f, 0xad, 0xca, 0x25, 0xab, 0x76,
	0xc9, 0x5a, 0xd4, 0x2e, 0x91, 0x1a, 0xc5, 0xa7, 0xd0, 0xa1, 0x2c, 0xa4, 0xa1, 0xd9, 0xf9, 0xe8,
	0x9c, 0x0a, 0xc4, 0x9f, 0x00, 0x28, 0x0b, 0xbd, 0x8c, 0xfa, 0x39, 0x67, 0x66, 0x77, 0xa0, 0x8d,
	0x76, 0x4f, 0x0e, 0x6f, 0x1d, 0xda, 0x61, 0x21, 0x91, 0x04, 0xd9, 0xa6, 0xf5, 0xeb, 0xf0, 0x5f,
	0x0d, 0xb6, 0x6a, 0x47, 0x70, 0x17, 0x5a, 0x71, 0x28, 0x4d, 0xdb, 0x26, 0xad, 0x38, 0xc4, 0x63,
	0xe8, 0x6d, 0x12, 0xff, 0x2d, 0xcd, 0x6a, 0x73, 0x1e, 0x36, 0x3e, 0xfa, 0x52, 0x6a, 0xa4, 0x66,
	0xf0, 0x7b, 0xe8, 0xc8, 0xeb, 0x53, 0xe6, 0xec, 0x5f, 0xc3, 0xd5, 0xa5, 0x12, 0xf1, 0xa4, 0x05,
	0xa9, 0x20, 0x7c, 0x06, 0x5b, 0x22, 0x22, 0xbc, 0x2c, 0x72, 0xe5, 0xce, 0xc1, 0x07, 0x13, 0x16,
	0x4a, 0x26, 0xd7, 0xe0, 0xf0, 0xef, 0x16, 0xb4, 0xaf, 0xfc, 0x24, 0xc1, 0xef, 0xa0, 0xfd, 0xc6,
	0x4f, 0x12, 0x75, 0xc3, 0xef, 0x67, 0xca, 0x60, 0xb9, 0x2c, 0x2f, 0x7c, 0x16, 0xd0, 0x9c, 0x48,
	0x48, 0xc0, 0x21, 0xcf, 0x7c, 0xb3, 0xf5, 0x11, 0x58, 0x40, 0xf8, 0x04, 0xf4, 0x32, 0xf3, 0xd5,
	0x19, 0xee, 0x65, 0x05, 0x83, 0x3f, 0x40, 0x2f, 0x8b, 0x59, 0xbe, 0xf6, 0xd9, 0xad, 0x13, 0x7c,
	0x80, 0xd7, 0x1c, 0x1e, 0x43, 0x67, 0xed, 0x8b, 0xb4, 0x75, 0xa4, 0xa1, 0xf7, 0x4e, 0xa8, 0x28,
	0x3c, 0x80, 0x9e, 0x38, 0x81, 0x17, 0x87, 0xf2, 0x5a, 0xb7, 0x49, 0x57, 0x0c, 0xdd, 0x10, 0x11,
	0xda, 0x61, 0x1c, 0x50, 0xb3, 0x37, 0xd0, 0x47, 0x3a, 0x91, 0xef, 0xc3, 0xbf, 0x34, 0xe8, 0xc8,
	0xc0, 0xe2, 0x51, 0x23, 0xff, 0xfb, 0xb7, 0x23, 0xdd, 0x6c, 0x80, 0xaa, 0xb9, 0xee, 0x6c, 0x00,
	0x47, 0x48, 0x44, 0x11, 0xf8, 0x14, 0xba, 0x19, 0xcd, 0xcb, 0xa4, 0x50, 0xf6, 0x98, 0x77, 0x34,
	0x8b, 0xd4, 0x89, 0xe2, 0x86, 0xff, 0x68, 0xd0, 0xbf, 0x51, 0xbf, 0xd9, 0x42, 0xda, 0xa7, 0xb4,
	0xd0, 0xd7, 0xb0, 0x93, 0xc5, 0x71, 0xb0, 0x8e, 0xbd, 0x80, 0x97, 0xac, 0x90, 0x57, 0xa8, 0x93,
	0x7e, 0x55, 0x9b, 0x88, 0x12, 0xfe, 0xdc, 0x48, 0xbf, 0x2e, 0xd3, 0xff, 0xe8, 0xf6, 0xc6, 0xee,
	0x8c, 0xff, 0xff, 0x1a, 0x6c, 0x5f, 0x1b, 0x22, 0x17, 0x13, 0x03, 0x8f, 0x95, 0xe9, 0x92, 0x66,
	0x72, 0x87, 0x62, 0x31, 0x51, 0x9b, 0xc9, 0xd2, 0xa7, 0xec, 0xe7, 0x1b, 0x78, 0x90, 0x51, 0x26,
	0x0e, 0xa0, 0x18, 0x5d, 0x32, 0x3b, 0xaa, 0x58, 0x41, 0x7b, 0xd0, 0x49, 0x39, 0xa3, 0x6f, 0xcd,
	0xf6, 0x40, 0x1f, 0x21, 0xa9, 0x06, 0xf8, 0xad, 0x4a, 0x75, 0xd5, 0xf9, 0x5f, 0x34, 0x0e, 0x21,
	0x62, 0x5f, 0xe5, 0x79, 0x38, 0x84, 0x6e, 0xd5, 0x7b, 0x68, 0x42, 0x2f, 0xf0, 0x37, 0x45, 0xcc,
	0x99, 0x6a, 0xdb, 0x7a, 0x78, 0xf4, 0x06, 0x1e, 0x34, 0x9a, 0x1e, 0x1f, 0xc3, 0xa3, 0x33, 0x7b,
	0xea, 0x78, 0xce, 0xec, 0xd4, 0x23, 0x8e, 0x7d, 0x31, 0x9f, 0x79, 0x97, 0xb3, 0x8b, 0x97, 0xce,
	0xc4, 0xfd, 0xc5, 0x75, 0x4e, 0x8d, 0xcf, 0x10, 0xa0, 0x3b, 0x9b, 0x93, 0xa9, 0x7d, 0x6e, 0x68,
	0xb8, 0x0b, 0xf0, 0xc2, 0x9e, 0x4d, 0xc8, 0x7c, 0xe2, 0x2e, 0x5e, 0x19, 0x2d, 0xdc, 0x81, 0xad,
	0xa9, 0xfd, 0xab, 0x77, 0xe5, 0xce, 0x4e, 0x0d, 0x5d, 0xa8, 0xf6, 0x99, 0x4d, 0x5c, 0xef, 0x95,
	0x3d, 0x75, 0x8c, 0x36, 0xf6, 0xa1, 0xb7, 0x70, 0xa7, 0xce, 0xfc, 0x72, 0x61, 0x74, 0x8e, 0xfe,
	0x84, 0xdd, 0xa6, 0xdf, 0x38, 0x80, 0xaf, 0x64, 0xe5, 0xfe, 0xa5, 0x77, 0x01, 0x54, 0x9d, 0xcc,
	0x67, 0x86, 0x86, 0x06, 0xec, 0xa8, 0xf1, 0xe2, 0xe2, 0x72, 0x3a, 0x37, 0x5a, 0x78, 0x00, 0x0f,
	0x6b, 0xc2, 0x39, 0xbb, 0x3c, 0xb7, 0x89, 0x77, 0x4a, 0xec, 0x2b, 0x43, 0xc7, 0xcf, 0xa1, 0xaf,
	0x04, 0x59, 0x68, 0xbf, 0xf8, 0xf1, 0xb7, 0xe7, 0x51, 0x5c, 0xac, 0xcb, 0xa5, 0x15, 0xf0, 0x74,
	0x1c, 0x32, 0xfe, 0x3a, 0xfe, 0x83, 0xaf, 0x56, 0x63, 0xe5, 0xe5, 0xb1, 0xbf, 0x89, 0xc7, 0x11,
	0x65, 0xf2, 0xbf, 0xe9, 0xf8, 0xfd, 0x0f, 0xc9, 0xb2, 0x2b, 0x2b, 0xcf, 0xde, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x5e, 0xa5, 0xbf, 0xb6, 0xec, 0x06, 0x00, 0x00,
}
