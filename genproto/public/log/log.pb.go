// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.13.0
// source: public/log/log.proto

package log

import (
	base "github.com/dnovikoff/mahjong-api/genproto/public/base"
	rules "github.com/dnovikoff/mahjong-api/genproto/public/rules"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All game reasons applied if only specified by rules.
type GameEndReason int32

const (
	GameEndReason_GAME_END_REASON_UNSPECIFIED GameEndReason = 0
	// All conditions are ok.
	GameEndReason_NORMAL GameEndReason = 1
	// One of players have less than zero points.
	GameEndReason_BANCROCITY GameEndReason = 2
	// Maximum possible wind played with non of player got required points to win.
	GameEndReason_MAX_WIND GameEndReason = 3
	// Dealer is first in orasu.
	GameEndReason_AGARI_YAME GameEndReason = 4
	// For some time-limited tournaments.
	GameEndReason_TIMEOUT GameEndReason = 5
)

// Enum value maps for GameEndReason.
var (
	GameEndReason_name = map[int32]string{
		0: "GAME_END_REASON_UNSPECIFIED",
		1: "NORMAL",
		2: "BANCROCITY",
		3: "MAX_WIND",
		4: "AGARI_YAME",
		5: "TIMEOUT",
	}
	GameEndReason_value = map[string]int32{
		"GAME_END_REASON_UNSPECIFIED": 0,
		"NORMAL":                      1,
		"BANCROCITY":                  2,
		"MAX_WIND":                    3,
		"AGARI_YAME":                  4,
		"TIMEOUT":                     5,
	}
)

func (x GameEndReason) Enum() *GameEndReason {
	p := new(GameEndReason)
	*p = x
	return p
}

func (x GameEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_public_log_log_proto_enumTypes[0].Descriptor()
}

func (GameEndReason) Type() protoreflect.EnumType {
	return &file_public_log_log_proto_enumTypes[0]
}

func (x GameEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameEndReason.Descriptor instead.
func (GameEndReason) EnumDescriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{0}
}

type RoundEndReason int32

const (
	RoundEndReason_Round_END_REASON_UNSPECIFIED RoundEndReason = 0
	RoundEndReason_REASON_RON                   RoundEndReason = 1
	RoundEndReason_REASON_TSUMO                 RoundEndReason = 2
	// Game ended at last tile.
	RoundEndReason_REASON_REGULAR_DRAW RoundEndReason = 3
	// This is when game ended by special rule, ex. 4 riichi
	RoundEndReason_REASON_DRAW RoundEndReason = 4
)

// Enum value maps for RoundEndReason.
var (
	RoundEndReason_name = map[int32]string{
		0: "Round_END_REASON_UNSPECIFIED",
		1: "REASON_RON",
		2: "REASON_TSUMO",
		3: "REASON_REGULAR_DRAW",
		4: "REASON_DRAW",
	}
	RoundEndReason_value = map[string]int32{
		"Round_END_REASON_UNSPECIFIED": 0,
		"REASON_RON":                   1,
		"REASON_TSUMO":                 2,
		"REASON_REGULAR_DRAW":          3,
		"REASON_DRAW":                  4,
	}
)

func (x RoundEndReason) Enum() *RoundEndReason {
	p := new(RoundEndReason)
	*p = x
	return p
}

func (x RoundEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoundEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_public_log_log_proto_enumTypes[1].Descriptor()
}

func (RoundEndReason) Type() protoreflect.EnumType {
	return &file_public_log_log_proto_enumTypes[1]
}

func (x RoundEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoundEndReason.Descriptor instead.
func (RoundEndReason) EnumDescriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{1}
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *GameInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Rounds []*Round  `protobuf:"bytes,2,rep,name=rounds,proto3" json:"rounds,omitempty"`
	// Uma+Oka changes.
	Changes   *Changes             `protobuf:"bytes,3,opt,name=changes,proto3" json:"changes,omitempty"`
	Started   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty"`
	Ended     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=ended,proto3" json:"ended,omitempty"`
	EndReason GameEndReason        `protobuf:"varint,6,opt,name=end_reason,json=endReason,proto3,enum=mahjong.log.GameEndReason" json:"end_reason,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{0}
}

func (x *Log) GetInfo() *GameInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Log) GetRounds() []*Round {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *Log) GetChanges() *Changes {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *Log) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *Log) GetEnded() *timestamp.Timestamp {
	if x != nil {
		return x.Ended
	}
	return nil
}

func (x *Log) GetEndReason() GameEndReason {
	if x != nil {
		return x.EndReason
	}
	return GameEndReason_GAME_END_REASON_UNSPECIFIED
}

type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Players  []*Player       `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Rules    *rules.Ruleset  `protobuf:"bytes,3,opt,name=rules,proto3" json:"rules,omitempty"`
	Timeouts *rules.Timeouts `protobuf:"bytes,4,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{1}
}

func (x *GameInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GameInfo) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameInfo) GetRules() *rules.Ruleset {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *GameInfo) GetTimeouts() *rules.Timeouts {
	if x != nil {
		return x.Timeouts
	}
	return nil
}

// Represents starting tile positions.
type Wall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wall    *base.Instances `protobuf:"bytes,1,opt,name=wall,proto3" json:"wall,omitempty"`
	Dora    *base.Instances `protobuf:"bytes,2,opt,name=dora,proto3" json:"dora,omitempty"`
	Ura     *base.Instances `protobuf:"bytes,3,opt,name=ura,proto3" json:"ura,omitempty"`
	Rinshan *base.Instances `protobuf:"bytes,4,opt,name=rinshan,proto3" json:"rinshan,omitempty"`
	// Hands for 4 players;
	Hands []*base.Instances `protobuf:"bytes,5,rep,name=hands,proto3" json:"hands,omitempty"`
	// To detect ex. seed.
	WallId string `protobuf:"bytes,6,opt,name=wall_id,json=wallId,proto3" json:"wall_id,omitempty"`
	// 2 numbers 1-6, representing dices.
	// Used only for UI representations.
	// Have no impact on a game.
	// Could be empty.
	Dice []int64 `protobuf:"varint,7,rep,packed,name=dice,proto3" json:"dice,omitempty"`
}

func (x *Wall) Reset() {
	*x = Wall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wall) ProtoMessage() {}

func (x *Wall) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wall.ProtoReflect.Descriptor instead.
func (*Wall) Descriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{2}
}

func (x *Wall) GetWall() *base.Instances {
	if x != nil {
		return x.Wall
	}
	return nil
}

func (x *Wall) GetDora() *base.Instances {
	if x != nil {
		return x.Dora
	}
	return nil
}

func (x *Wall) GetUra() *base.Instances {
	if x != nil {
		return x.Ura
	}
	return nil
}

func (x *Wall) GetRinshan() *base.Instances {
	if x != nil {
		return x.Rinshan
	}
	return nil
}

func (x *Wall) GetHands() []*base.Instances {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *Wall) GetWallId() string {
	if x != nil {
		return x.WallId
	}
	return ""
}

func (x *Wall) GetDice() []int64 {
	if x != nil {
		return x.Dice
	}
	return nil
}

type Round struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *RoundInfo   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Events []*Event     `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	Result *RoundResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Round) Reset() {
	*x = Round{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round) ProtoMessage() {}

func (x *Round) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round.ProtoReflect.Descriptor instead.
func (*Round) Descriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{3}
}

func (x *Round) GetInfo() *RoundInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Round) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Round) GetResult() *RoundResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type RoundResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting changes, calculated from money at the start of the round to the end of all payments done
	Changes *Changes `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
	// Riichi sticks on the table at the end of the round and afer all payments
	RiichiCount int64          `protobuf:"varint,2,opt,name=riichi_count,json=riichiCount,proto3" json:"riichi_count,omitempty"`
	EndReason   RoundEndReason `protobuf:"varint,3,opt,name=end_reason,json=endReason,proto3,enum=mahjong.log.RoundEndReason" json:"end_reason,omitempty"`
}

func (x *RoundResult) Reset() {
	*x = RoundResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundResult) ProtoMessage() {}

func (x *RoundResult) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundResult.ProtoReflect.Descriptor instead.
func (*RoundResult) Descriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{4}
}

func (x *RoundResult) GetChanges() *Changes {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *RoundResult) GetRiichiCount() int64 {
	if x != nil {
		return x.RiichiCount
	}
	return 0
}

func (x *RoundResult) GetEndReason() RoundEndReason {
	if x != nil {
		return x.EndReason
	}
	return RoundEndReason_Round_END_REASON_UNSPECIFIED
}

type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1-4 East, 5-8 South, 9-12 West, 13-16 North
	// Dealer calculated according to this number.
	RoundNumber int64 `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	// Number of riichi sticks at the moment of round starts.
	RiichiCount  int64 `protobuf:"varint,2,opt,name=riichi_count,json=riichiCount,proto3" json:"riichi_count,omitempty"`
	RenchanCount int64 `protobuf:"varint,3,opt,name=renchan_count,json=renchanCount,proto3" json:"renchan_count,omitempty"`
	// Player point at the moment of round starts.
	Money []int64 `protobuf:"zigzag64,4,rep,packed,name=money,proto3" json:"money,omitempty"`
	Wall  *Wall   `protobuf:"bytes,5,opt,name=wall,proto3" json:"wall,omitempty"`
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{5}
}

func (x *RoundInfo) GetRoundNumber() int64 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *RoundInfo) GetRiichiCount() int64 {
	if x != nil {
		return x.RiichiCount
	}
	return 0
}

func (x *RoundInfo) GetRenchanCount() int64 {
	if x != nil {
		return x.RenchanCount
	}
	return 0
}

func (x *RoundInfo) GetMoney() []int64 {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *RoundInfo) GetWall() *Wall {
	if x != nil {
		return x.Wall
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Player name, visible at the client.
	Caption string `protobuf:"bytes,1,opt,name=caption,proto3" json:"caption,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_log_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_public_log_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_public_log_log_proto_rawDescGZIP(), []int{6}
}

func (x *Player) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

var File_public_log_log_proto protoreflect.FileDescriptor

var file_public_log_log_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e,
	0x6c, 0x6f, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6c,
	0x6f, 0x67, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x03, 0x4c, 0x6f, 0x67,
	0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f,
	0x67, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x04, 0x57, 0x61,
	0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x04, 0x77, 0x61, 0x6c, 0x6c, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x6f, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x04, 0x64, 0x6f, 0x72, 0x61, 0x12, 0x29, 0x0a, 0x03,
	0x75, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x03, 0x75, 0x72, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x69, 0x6e, 0x73, 0x68,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x07, 0x72, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x69, 0x63, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69,
	0x69, 0x63, 0x68, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69,
	0x69, 0x63, 0x68, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x77, 0x61, 0x6c, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x77, 0x61, 0x6c, 0x6c, 0x22,
	0x22, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2a, 0x77, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x4e, 0x43, 0x52, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x58, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x41, 0x52, 0x49, 0x5f, 0x59, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x2a, 0x7e, 0x0a, 0x0e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x53, 0x55, 0x4d, 0x4f,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x04, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6e, 0x6f, 0x76, 0x69,
	0x6b, 0x6f, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2f, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_log_log_proto_rawDescOnce sync.Once
	file_public_log_log_proto_rawDescData = file_public_log_log_proto_rawDesc
)

func file_public_log_log_proto_rawDescGZIP() []byte {
	file_public_log_log_proto_rawDescOnce.Do(func() {
		file_public_log_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_log_log_proto_rawDescData)
	})
	return file_public_log_log_proto_rawDescData
}

var file_public_log_log_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_public_log_log_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_public_log_log_proto_goTypes = []interface{}{
	(GameEndReason)(0),          // 0: mahjong.log.GameEndReason
	(RoundEndReason)(0),         // 1: mahjong.log.RoundEndReason
	(*Log)(nil),                 // 2: mahjong.log.Log
	(*GameInfo)(nil),            // 3: mahjong.log.GameInfo
	(*Wall)(nil),                // 4: mahjong.log.Wall
	(*Round)(nil),               // 5: mahjong.log.Round
	(*RoundResult)(nil),         // 6: mahjong.log.RoundResult
	(*RoundInfo)(nil),           // 7: mahjong.log.RoundInfo
	(*Player)(nil),              // 8: mahjong.log.Player
	(*Changes)(nil),             // 9: mahjong.log.Changes
	(*timestamp.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*rules.Ruleset)(nil),       // 11: mahjong.rules.Ruleset
	(*rules.Timeouts)(nil),      // 12: mahjong.rules.Timeouts
	(*base.Instances)(nil),      // 13: mahjong.base.Instances
	(*Event)(nil),               // 14: mahjong.log.Event
}
var file_public_log_log_proto_depIdxs = []int32{
	3,  // 0: mahjong.log.Log.info:type_name -> mahjong.log.GameInfo
	5,  // 1: mahjong.log.Log.rounds:type_name -> mahjong.log.Round
	9,  // 2: mahjong.log.Log.changes:type_name -> mahjong.log.Changes
	10, // 3: mahjong.log.Log.started:type_name -> google.protobuf.Timestamp
	10, // 4: mahjong.log.Log.ended:type_name -> google.protobuf.Timestamp
	0,  // 5: mahjong.log.Log.end_reason:type_name -> mahjong.log.GameEndReason
	8,  // 6: mahjong.log.GameInfo.players:type_name -> mahjong.log.Player
	11, // 7: mahjong.log.GameInfo.rules:type_name -> mahjong.rules.Ruleset
	12, // 8: mahjong.log.GameInfo.timeouts:type_name -> mahjong.rules.Timeouts
	13, // 9: mahjong.log.Wall.wall:type_name -> mahjong.base.Instances
	13, // 10: mahjong.log.Wall.dora:type_name -> mahjong.base.Instances
	13, // 11: mahjong.log.Wall.ura:type_name -> mahjong.base.Instances
	13, // 12: mahjong.log.Wall.rinshan:type_name -> mahjong.base.Instances
	13, // 13: mahjong.log.Wall.hands:type_name -> mahjong.base.Instances
	7,  // 14: mahjong.log.Round.info:type_name -> mahjong.log.RoundInfo
	14, // 15: mahjong.log.Round.events:type_name -> mahjong.log.Event
	6,  // 16: mahjong.log.Round.result:type_name -> mahjong.log.RoundResult
	9,  // 17: mahjong.log.RoundResult.changes:type_name -> mahjong.log.Changes
	1,  // 18: mahjong.log.RoundResult.end_reason:type_name -> mahjong.log.RoundEndReason
	4,  // 19: mahjong.log.RoundInfo.wall:type_name -> mahjong.log.Wall
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_public_log_log_proto_init() }
func file_public_log_log_proto_init() {
	if File_public_log_log_proto != nil {
		return
	}
	file_public_log_events_proto_init()
	file_public_log_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_public_log_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_log_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_log_log_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_log_log_proto_goTypes,
		DependencyIndexes: file_public_log_log_proto_depIdxs,
		EnumInfos:         file_public_log_log_proto_enumTypes,
		MessageInfos:      file_public_log_log_proto_msgTypes,
	}.Build()
	File_public_log_log_proto = out.File
	file_public_log_log_proto_rawDesc = nil
	file_public_log_log_proto_goTypes = nil
	file_public_log_log_proto_depIdxs = nil
}
