// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: public/base/yaku.proto

package base

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// This table contains several yakus, meaning the same, depending on choosen formating rules.
// For example there is YAKUHAI, TON, SELF_TON, ROUND_TON.
type Yaku int32

const (
	Yaku_YAKU_UNSPECIFIED Yaku = 0
	Yaku_RIICHI           Yaku = 1
	Yaku_DABURI           Yaku = 2
	Yaku_IPPATSU          Yaku = 3
	Yaku_TSUMO            Yaku = 4
	Yaku_TANYAO           Yaku = 5
	Yaku_CHANTA           Yaku = 6
	Yaku_JUNCHAN          Yaku = 7
	Yaku_HONROUTO         Yaku = 8
	// yakuhai and variants
	Yaku_YAKUHAI        Yaku = 9
	Yaku_HAKU           Yaku = 10
	Yaku_HATSU          Yaku = 11
	Yaku_CHUN           Yaku = 12
	Yaku_WIND_ROUND     Yaku = 13
	Yaku_WIND_SELF      Yaku = 14
	Yaku_TON            Yaku = 15
	Yaku_NAN            Yaku = 16
	Yaku_SJA            Yaku = 17
	Yaku_PEI            Yaku = 18
	Yaku_SELF_TON       Yaku = 19
	Yaku_SELF_NAN       Yaku = 20
	Yaku_SELF_SJA       Yaku = 21
	Yaku_SELF_PEI       Yaku = 22
	Yaku_ROUND_TON      Yaku = 23
	Yaku_ROUND_NAN      Yaku = 24
	Yaku_ROUND_SJA      Yaku = 25
	Yaku_ROUND_PEI      Yaku = 26
	Yaku_CHIITOI        Yaku = 27
	Yaku_TOITOI         Yaku = 28
	Yaku_SANANKOU       Yaku = 29
	Yaku_SANKANTSU      Yaku = 30
	Yaku_SANSHOKU       Yaku = 31
	Yaku_SHOUSANGEN     Yaku = 32
	Yaku_PINFU          Yaku = 33
	Yaku_IPPEIKO        Yaku = 34
	Yaku_RYANPEIKOU     Yaku = 35
	Yaku_ITSUU          Yaku = 36
	Yaku_SANSHOKUDOUKOU Yaku = 37
	Yaku_HONITSU        Yaku = 38
	Yaku_CHINITSU       Yaku = 39
	Yaku_DORA           Yaku = 40
	Yaku_URADORA        Yaku = 41
	Yaku_AKADORA        Yaku = 42
	Yaku_RENHOU_MANGAN  Yaku = 43
	Yaku_HAITEI         Yaku = 44
	Yaku_HOUTEI         Yaku = 45
	Yaku_RINSHAN        Yaku = 46
	Yaku_CHANKAN        Yaku = 47
)

// Enum value maps for Yaku.
var (
	Yaku_name = map[int32]string{
		0:  "YAKU_UNSPECIFIED",
		1:  "RIICHI",
		2:  "DABURI",
		3:  "IPPATSU",
		4:  "TSUMO",
		5:  "TANYAO",
		6:  "CHANTA",
		7:  "JUNCHAN",
		8:  "HONROUTO",
		9:  "YAKUHAI",
		10: "HAKU",
		11: "HATSU",
		12: "CHUN",
		13: "WIND_ROUND",
		14: "WIND_SELF",
		15: "TON",
		16: "NAN",
		17: "SJA",
		18: "PEI",
		19: "SELF_TON",
		20: "SELF_NAN",
		21: "SELF_SJA",
		22: "SELF_PEI",
		23: "ROUND_TON",
		24: "ROUND_NAN",
		25: "ROUND_SJA",
		26: "ROUND_PEI",
		27: "CHIITOI",
		28: "TOITOI",
		29: "SANANKOU",
		30: "SANKANTSU",
		31: "SANSHOKU",
		32: "SHOUSANGEN",
		33: "PINFU",
		34: "IPPEIKO",
		35: "RYANPEIKOU",
		36: "ITSUU",
		37: "SANSHOKUDOUKOU",
		38: "HONITSU",
		39: "CHINITSU",
		40: "DORA",
		41: "URADORA",
		42: "AKADORA",
		43: "RENHOU_MANGAN",
		44: "HAITEI",
		45: "HOUTEI",
		46: "RINSHAN",
		47: "CHANKAN",
	}
	Yaku_value = map[string]int32{
		"YAKU_UNSPECIFIED": 0,
		"RIICHI":           1,
		"DABURI":           2,
		"IPPATSU":          3,
		"TSUMO":            4,
		"TANYAO":           5,
		"CHANTA":           6,
		"JUNCHAN":          7,
		"HONROUTO":         8,
		"YAKUHAI":          9,
		"HAKU":             10,
		"HATSU":            11,
		"CHUN":             12,
		"WIND_ROUND":       13,
		"WIND_SELF":        14,
		"TON":              15,
		"NAN":              16,
		"SJA":              17,
		"PEI":              18,
		"SELF_TON":         19,
		"SELF_NAN":         20,
		"SELF_SJA":         21,
		"SELF_PEI":         22,
		"ROUND_TON":        23,
		"ROUND_NAN":        24,
		"ROUND_SJA":        25,
		"ROUND_PEI":        26,
		"CHIITOI":          27,
		"TOITOI":           28,
		"SANANKOU":         29,
		"SANKANTSU":        30,
		"SANSHOKU":         31,
		"SHOUSANGEN":       32,
		"PINFU":            33,
		"IPPEIKO":          34,
		"RYANPEIKOU":       35,
		"ITSUU":            36,
		"SANSHOKUDOUKOU":   37,
		"HONITSU":          38,
		"CHINITSU":         39,
		"DORA":             40,
		"URADORA":          41,
		"AKADORA":          42,
		"RENHOU_MANGAN":    43,
		"HAITEI":           44,
		"HOUTEI":           45,
		"RINSHAN":          46,
		"CHANKAN":          47,
	}
)

func (x Yaku) Enum() *Yaku {
	p := new(Yaku)
	*p = x
	return p
}

func (x Yaku) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yaku) Descriptor() protoreflect.EnumDescriptor {
	return file_public_base_yaku_proto_enumTypes[0].Descriptor()
}

func (Yaku) Type() protoreflect.EnumType {
	return &file_public_base_yaku_proto_enumTypes[0]
}

func (x Yaku) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yaku.Descriptor instead.
func (Yaku) EnumDescriptor() ([]byte, []int) {
	return file_public_base_yaku_proto_rawDescGZIP(), []int{0}
}

type Yakuman int32

const (
	Yakuman_YAKUMAN_UNSPECIFIED Yakuman = 0
	Yakuman_KOKUSHI             Yakuman = 1
	Yakuman_KOKUSHI13           Yakuman = 2
	Yakuman_SUUKANTSU           Yakuman = 3
	Yakuman_SUUANKOU            Yakuman = 4
	Yakuman_SUUANKOUTANKI       Yakuman = 5
	Yakuman_DAISANGEN           Yakuman = 6
	Yakuman_SHOUSUUSHI          Yakuman = 7
	Yakuman_DAISUUSHI           Yakuman = 8
	Yakuman_RYUUIISOU           Yakuman = 9
	Yakuman_TSUIISOU            Yakuman = 10
	Yakuman_CHINROUTO           Yakuman = 11
	Yakuman_CHUURENPOOTO        Yakuman = 12
	Yakuman_CHUURENPOOTO9       Yakuman = 13
	Yakuman_TENHOU              Yakuman = 14
	Yakuman_CHIHOU              Yakuman = 15
	Yakuman_RENHOU              Yakuman = 16
)

// Enum value maps for Yakuman.
var (
	Yakuman_name = map[int32]string{
		0:  "YAKUMAN_UNSPECIFIED",
		1:  "KOKUSHI",
		2:  "KOKUSHI13",
		3:  "SUUKANTSU",
		4:  "SUUANKOU",
		5:  "SUUANKOUTANKI",
		6:  "DAISANGEN",
		7:  "SHOUSUUSHI",
		8:  "DAISUUSHI",
		9:  "RYUUIISOU",
		10: "TSUIISOU",
		11: "CHINROUTO",
		12: "CHUURENPOOTO",
		13: "CHUURENPOOTO9",
		14: "TENHOU",
		15: "CHIHOU",
		16: "RENHOU",
	}
	Yakuman_value = map[string]int32{
		"YAKUMAN_UNSPECIFIED": 0,
		"KOKUSHI":             1,
		"KOKUSHI13":           2,
		"SUUKANTSU":           3,
		"SUUANKOU":            4,
		"SUUANKOUTANKI":       5,
		"DAISANGEN":           6,
		"SHOUSUUSHI":          7,
		"DAISUUSHI":           8,
		"RYUUIISOU":           9,
		"TSUIISOU":            10,
		"CHINROUTO":           11,
		"CHUURENPOOTO":        12,
		"CHUURENPOOTO9":       13,
		"TENHOU":              14,
		"CHIHOU":              15,
		"RENHOU":              16,
	}
)

func (x Yakuman) Enum() *Yakuman {
	p := new(Yakuman)
	*p = x
	return p
}

func (x Yakuman) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Yakuman) Descriptor() protoreflect.EnumDescriptor {
	return file_public_base_yaku_proto_enumTypes[1].Descriptor()
}

func (Yakuman) Type() protoreflect.EnumType {
	return &file_public_base_yaku_proto_enumTypes[1]
}

func (x Yakuman) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Yakuman.Descriptor instead.
func (Yakuman) EnumDescriptor() ([]byte, []int) {
	return file_public_base_yaku_proto_rawDescGZIP(), []int{1}
}

type YakuValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yaku Yaku `protobuf:"varint,1,opt,name=yaku,proto3,enum=mahjong.base.Yaku" json:"yaku,omitempty"`
	// Han value
	Han int64 `protobuf:"varint,2,opt,name=han,proto3" json:"han,omitempty"`
}

func (x *YakuValue) Reset() {
	*x = YakuValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_base_yaku_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakuValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakuValue) ProtoMessage() {}

func (x *YakuValue) ProtoReflect() protoreflect.Message {
	mi := &file_public_base_yaku_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakuValue.ProtoReflect.Descriptor instead.
func (*YakuValue) Descriptor() ([]byte, []int) {
	return file_public_base_yaku_proto_rawDescGZIP(), []int{0}
}

func (x *YakuValue) GetYaku() Yaku {
	if x != nil {
		return x.Yaku
	}
	return Yaku_YAKU_UNSPECIFIED
}

func (x *YakuValue) GetHan() int64 {
	if x != nil {
		return x.Han
	}
	return 0
}

type YakumanValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yakuman Yakuman `protobuf:"varint,1,opt,name=yakuman,proto3,enum=mahjong.base.Yakuman" json:"yakuman,omitempty"`
	// Used 1 for single and 2 for double yakumans
	Multiplier int64 `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *YakumanValue) Reset() {
	*x = YakumanValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_base_yaku_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YakumanValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YakumanValue) ProtoMessage() {}

func (x *YakumanValue) ProtoReflect() protoreflect.Message {
	mi := &file_public_base_yaku_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YakumanValue.ProtoReflect.Descriptor instead.
func (*YakumanValue) Descriptor() ([]byte, []int) {
	return file_public_base_yaku_proto_rawDescGZIP(), []int{1}
}

func (x *YakumanValue) GetYakuman() Yakuman {
	if x != nil {
		return x.Yakuman
	}
	return Yakuman_YAKUMAN_UNSPECIFIED
}

func (x *YakumanValue) GetMultiplier() int64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

var File_public_base_yaku_proto protoreflect.FileDescriptor

var file_public_base_yaku_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x79, 0x61,
	0x6b, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x59, 0x61, 0x6b, 0x75, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x79, 0x61, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x04, 0x79, 0x61, 0x6b, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x68, 0x61, 0x6e, 0x22, 0x5f, 0x0a,
	0x0c, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x59, 0x61,
	0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x07, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x2a, 0x81,
	0x05, 0x0a, 0x04, 0x59, 0x61, 0x6b, 0x75, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x41, 0x4b, 0x55, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x49, 0x49, 0x43, 0x48, 0x49, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x42,
	0x55, 0x52, 0x49, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x50, 0x50, 0x41, 0x54, 0x53, 0x55,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x53, 0x55, 0x4d, 0x4f, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x41, 0x4e, 0x59, 0x41, 0x4f, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x41, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x4e, 0x52, 0x4f, 0x55, 0x54, 0x4f, 0x10, 0x08,
	0x12, 0x0b, 0x0a, 0x07, 0x59, 0x41, 0x4b, 0x55, 0x48, 0x41, 0x49, 0x10, 0x09, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x41, 0x4b, 0x55, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x41, 0x54, 0x53, 0x55,
	0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x55, 0x4e, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a,
	0x57, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x41, 0x4e, 0x10, 0x10, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x4a, 0x41, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x49, 0x10, 0x12, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x54, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x4e, 0x41, 0x4e, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x45, 0x4c, 0x46, 0x5f, 0x53, 0x4a, 0x41, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x4c,
	0x46, 0x5f, 0x50, 0x45, 0x49, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x54, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x4e, 0x41, 0x4e, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x4a, 0x41, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x45,
	0x49, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x49, 0x49, 0x54, 0x4f, 0x49, 0x10, 0x1b,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4f, 0x49, 0x54, 0x4f, 0x49, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x41, 0x4e, 0x41, 0x4e, 0x4b, 0x4f, 0x55, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41,
	0x4e, 0x4b, 0x41, 0x4e, 0x54, 0x53, 0x55, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x4e,
	0x53, 0x48, 0x4f, 0x4b, 0x55, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x53,
	0x41, 0x4e, 0x47, 0x45, 0x4e, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x4e, 0x46, 0x55,
	0x10, 0x21, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x50, 0x50, 0x45, 0x49, 0x4b, 0x4f, 0x10, 0x22, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x59, 0x41, 0x4e, 0x50, 0x45, 0x49, 0x4b, 0x4f, 0x55, 0x10, 0x23, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x54, 0x53, 0x55, 0x55, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41,
	0x4e, 0x53, 0x48, 0x4f, 0x4b, 0x55, 0x44, 0x4f, 0x55, 0x4b, 0x4f, 0x55, 0x10, 0x25, 0x12, 0x0b,
	0x0a, 0x07, 0x48, 0x4f, 0x4e, 0x49, 0x54, 0x53, 0x55, 0x10, 0x26, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x48, 0x49, 0x4e, 0x49, 0x54, 0x53, 0x55, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x52,
	0x41, 0x10, 0x28, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x52, 0x41, 0x44, 0x4f, 0x52, 0x41, 0x10, 0x29,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4b, 0x41, 0x44, 0x4f, 0x52, 0x41, 0x10, 0x2a, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x4e, 0x48, 0x4f, 0x55, 0x5f, 0x4d, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x10, 0x2b,
	0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x49, 0x54, 0x45, 0x49, 0x10, 0x2c, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x4f, 0x55, 0x54, 0x45, 0x49, 0x10, 0x2d, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x49, 0x4e, 0x53,
	0x48, 0x41, 0x4e, 0x10, 0x2e, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x4b, 0x41, 0x4e,
	0x10, 0x2f, 0x2a, 0x91, 0x02, 0x0a, 0x07, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x17,
	0x0a, 0x13, 0x59, 0x41, 0x4b, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x4f, 0x4b, 0x55, 0x53,
	0x48, 0x49, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x4f, 0x4b, 0x55, 0x53, 0x48, 0x49, 0x31,
	0x33, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x55, 0x4b, 0x41, 0x4e, 0x54, 0x53, 0x55,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x55, 0x41, 0x4e, 0x4b, 0x4f, 0x55, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x55, 0x41, 0x4e, 0x4b, 0x4f, 0x55, 0x54, 0x41, 0x4e, 0x4b,
	0x49, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x49, 0x53, 0x41, 0x4e, 0x47, 0x45, 0x4e,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x53, 0x55, 0x55, 0x53, 0x48, 0x49,
	0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x49, 0x53, 0x55, 0x55, 0x53, 0x48, 0x49, 0x10,
	0x08, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x59, 0x55, 0x55, 0x49, 0x49, 0x53, 0x4f, 0x55, 0x10, 0x09,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x53, 0x55, 0x49, 0x49, 0x53, 0x4f, 0x55, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x48, 0x49, 0x4e, 0x52, 0x4f, 0x55, 0x54, 0x4f, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x48, 0x55, 0x55, 0x52, 0x45, 0x4e, 0x50, 0x4f, 0x4f, 0x54, 0x4f, 0x10, 0x0c, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x48, 0x55, 0x55, 0x52, 0x45, 0x4e, 0x50, 0x4f, 0x4f, 0x54, 0x4f, 0x39,
	0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x4e, 0x48, 0x4f, 0x55, 0x10, 0x0e, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x48, 0x49, 0x48, 0x4f, 0x55, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x4e, 0x48, 0x4f, 0x55, 0x10, 0x10, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6e, 0x6f, 0x76, 0x69, 0x6b, 0x6f, 0x66, 0x66, 0x2f, 0x6d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_base_yaku_proto_rawDescOnce sync.Once
	file_public_base_yaku_proto_rawDescData = file_public_base_yaku_proto_rawDesc
)

func file_public_base_yaku_proto_rawDescGZIP() []byte {
	file_public_base_yaku_proto_rawDescOnce.Do(func() {
		file_public_base_yaku_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_base_yaku_proto_rawDescData)
	})
	return file_public_base_yaku_proto_rawDescData
}

var file_public_base_yaku_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_public_base_yaku_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_public_base_yaku_proto_goTypes = []interface{}{
	(Yaku)(0),            // 0: mahjong.base.Yaku
	(Yakuman)(0),         // 1: mahjong.base.Yakuman
	(*YakuValue)(nil),    // 2: mahjong.base.YakuValue
	(*YakumanValue)(nil), // 3: mahjong.base.YakumanValue
}
var file_public_base_yaku_proto_depIdxs = []int32{
	0, // 0: mahjong.base.YakuValue.yaku:type_name -> mahjong.base.Yaku
	1, // 1: mahjong.base.YakumanValue.yakuman:type_name -> mahjong.base.Yakuman
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_public_base_yaku_proto_init() }
func file_public_base_yaku_proto_init() {
	if File_public_base_yaku_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_base_yaku_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakuValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_base_yaku_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YakumanValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_base_yaku_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_base_yaku_proto_goTypes,
		DependencyIndexes: file_public_base_yaku_proto_depIdxs,
		EnumInfos:         file_public_base_yaku_proto_enumTypes,
		MessageInfos:      file_public_base_yaku_proto_msgTypes,
	}.Build()
	File_public_base_yaku_proto = out.File
	file_public_base_yaku_proto_rawDesc = nil
	file_public_base_yaku_proto_goTypes = nil
	file_public_base_yaku_proto_depIdxs = nil
}
