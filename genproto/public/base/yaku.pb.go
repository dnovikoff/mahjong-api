// Code generated by protoc-gen-go. DO NOT EDIT.
// source: public/base/yaku.proto

package base

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This table contains several yakus, meaning the same, depending on choosen formating rules.
// For example there is YAKUHAI, TON, SELF_TON, ROUND_TON.
type Yaku int32

const (
	Yaku_YAKU_UNSPECIFIED Yaku = 0
	Yaku_RIICHI           Yaku = 1
	Yaku_DABURI           Yaku = 2
	Yaku_IPPATSU          Yaku = 3
	Yaku_TSUMO            Yaku = 4
	Yaku_TANYAO           Yaku = 5
	Yaku_CHANTA           Yaku = 6
	Yaku_JUNCHAN          Yaku = 7
	Yaku_HONROUTO         Yaku = 8
	// yakuhai and variants
	Yaku_YAKUHAI        Yaku = 9
	Yaku_HAKU           Yaku = 10
	Yaku_HATSU          Yaku = 11
	Yaku_CHUN           Yaku = 12
	Yaku_WIND_ROUND     Yaku = 13
	Yaku_WIND_SELF      Yaku = 14
	Yaku_TON            Yaku = 15
	Yaku_NAN            Yaku = 16
	Yaku_SJA            Yaku = 17
	Yaku_PEI            Yaku = 18
	Yaku_SELF_TON       Yaku = 19
	Yaku_SELF_NAN       Yaku = 20
	Yaku_SELF_SJA       Yaku = 21
	Yaku_SELF_PEI       Yaku = 22
	Yaku_ROUND_TON      Yaku = 23
	Yaku_ROUND_NAN      Yaku = 24
	Yaku_ROUND_SJA      Yaku = 25
	Yaku_ROUND_PEI      Yaku = 26
	Yaku_CHIITOI        Yaku = 27
	Yaku_TOITOI         Yaku = 28
	Yaku_SANANKOU       Yaku = 29
	Yaku_SANKANTSU      Yaku = 30
	Yaku_SANSHOKU       Yaku = 31
	Yaku_SHOUSANGEN     Yaku = 32
	Yaku_PINFU          Yaku = 33
	Yaku_IPPEIKO        Yaku = 34
	Yaku_RYANPEIKOU     Yaku = 35
	Yaku_ITSUU          Yaku = 36
	Yaku_SANSHOKUDOUKOU Yaku = 37
	Yaku_HONITSU        Yaku = 38
	Yaku_CHINITSU       Yaku = 39
	Yaku_DORA           Yaku = 40
	Yaku_URADORA        Yaku = 41
	Yaku_AKADORA        Yaku = 42
	Yaku_RENHOU_MANGAN  Yaku = 43
	Yaku_HAITEI         Yaku = 44
	Yaku_HOUTEI         Yaku = 45
	Yaku_RINSHAN        Yaku = 46
	Yaku_CHANKAN        Yaku = 47
)

var Yaku_name = map[int32]string{
	0:  "YAKU_UNSPECIFIED",
	1:  "RIICHI",
	2:  "DABURI",
	3:  "IPPATSU",
	4:  "TSUMO",
	5:  "TANYAO",
	6:  "CHANTA",
	7:  "JUNCHAN",
	8:  "HONROUTO",
	9:  "YAKUHAI",
	10: "HAKU",
	11: "HATSU",
	12: "CHUN",
	13: "WIND_ROUND",
	14: "WIND_SELF",
	15: "TON",
	16: "NAN",
	17: "SJA",
	18: "PEI",
	19: "SELF_TON",
	20: "SELF_NAN",
	21: "SELF_SJA",
	22: "SELF_PEI",
	23: "ROUND_TON",
	24: "ROUND_NAN",
	25: "ROUND_SJA",
	26: "ROUND_PEI",
	27: "CHIITOI",
	28: "TOITOI",
	29: "SANANKOU",
	30: "SANKANTSU",
	31: "SANSHOKU",
	32: "SHOUSANGEN",
	33: "PINFU",
	34: "IPPEIKO",
	35: "RYANPEIKOU",
	36: "ITSUU",
	37: "SANSHOKUDOUKOU",
	38: "HONITSU",
	39: "CHINITSU",
	40: "DORA",
	41: "URADORA",
	42: "AKADORA",
	43: "RENHOU_MANGAN",
	44: "HAITEI",
	45: "HOUTEI",
	46: "RINSHAN",
	47: "CHANKAN",
}

var Yaku_value = map[string]int32{
	"YAKU_UNSPECIFIED": 0,
	"RIICHI":           1,
	"DABURI":           2,
	"IPPATSU":          3,
	"TSUMO":            4,
	"TANYAO":           5,
	"CHANTA":           6,
	"JUNCHAN":          7,
	"HONROUTO":         8,
	"YAKUHAI":          9,
	"HAKU":             10,
	"HATSU":            11,
	"CHUN":             12,
	"WIND_ROUND":       13,
	"WIND_SELF":        14,
	"TON":              15,
	"NAN":              16,
	"SJA":              17,
	"PEI":              18,
	"SELF_TON":         19,
	"SELF_NAN":         20,
	"SELF_SJA":         21,
	"SELF_PEI":         22,
	"ROUND_TON":        23,
	"ROUND_NAN":        24,
	"ROUND_SJA":        25,
	"ROUND_PEI":        26,
	"CHIITOI":          27,
	"TOITOI":           28,
	"SANANKOU":         29,
	"SANKANTSU":        30,
	"SANSHOKU":         31,
	"SHOUSANGEN":       32,
	"PINFU":            33,
	"IPPEIKO":          34,
	"RYANPEIKOU":       35,
	"ITSUU":            36,
	"SANSHOKUDOUKOU":   37,
	"HONITSU":          38,
	"CHINITSU":         39,
	"DORA":             40,
	"URADORA":          41,
	"AKADORA":          42,
	"RENHOU_MANGAN":    43,
	"HAITEI":           44,
	"HOUTEI":           45,
	"RINSHAN":          46,
	"CHANKAN":          47,
}

func (x Yaku) String() string {
	return proto.EnumName(Yaku_name, int32(x))
}

func (Yaku) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77d945c42c8401a4, []int{0}
}

type Yakuman int32

const (
	Yakuman_YAKUMAN_UNSPECIFIED Yakuman = 0
	Yakuman_KOKUSHI             Yakuman = 1
	Yakuman_KOKUSHI13           Yakuman = 2
	Yakuman_SUUKANTSU           Yakuman = 3
	Yakuman_SUUANKOU            Yakuman = 4
	Yakuman_SUUANKOUTANKI       Yakuman = 5
	Yakuman_DAISANGEN           Yakuman = 6
	Yakuman_SHOUSUUSHI          Yakuman = 7
	Yakuman_DAISUUSHI           Yakuman = 8
	Yakuman_RYUUIISOU           Yakuman = 9
	Yakuman_TSUIISOU            Yakuman = 10
	Yakuman_CHINROUTO           Yakuman = 11
	Yakuman_CHUURENPOOTO        Yakuman = 12
	Yakuman_CHUURENPOOTO9       Yakuman = 13
	Yakuman_TENHOU              Yakuman = 14
	Yakuman_CHIHOU              Yakuman = 15
	Yakuman_RENHOU              Yakuman = 16
)

var Yakuman_name = map[int32]string{
	0:  "YAKUMAN_UNSPECIFIED",
	1:  "KOKUSHI",
	2:  "KOKUSHI13",
	3:  "SUUKANTSU",
	4:  "SUUANKOU",
	5:  "SUUANKOUTANKI",
	6:  "DAISANGEN",
	7:  "SHOUSUUSHI",
	8:  "DAISUUSHI",
	9:  "RYUUIISOU",
	10: "TSUIISOU",
	11: "CHINROUTO",
	12: "CHUURENPOOTO",
	13: "CHUURENPOOTO9",
	14: "TENHOU",
	15: "CHIHOU",
	16: "RENHOU",
}

var Yakuman_value = map[string]int32{
	"YAKUMAN_UNSPECIFIED": 0,
	"KOKUSHI":             1,
	"KOKUSHI13":           2,
	"SUUKANTSU":           3,
	"SUUANKOU":            4,
	"SUUANKOUTANKI":       5,
	"DAISANGEN":           6,
	"SHOUSUUSHI":          7,
	"DAISUUSHI":           8,
	"RYUUIISOU":           9,
	"TSUIISOU":            10,
	"CHINROUTO":           11,
	"CHUURENPOOTO":        12,
	"CHUURENPOOTO9":       13,
	"TENHOU":              14,
	"CHIHOU":              15,
	"RENHOU":              16,
}

func (x Yakuman) String() string {
	return proto.EnumName(Yakuman_name, int32(x))
}

func (Yakuman) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77d945c42c8401a4, []int{1}
}

type YakuValue struct {
	Yaku Yaku `protobuf:"varint,1,opt,name=yaku,proto3,enum=mahjong.base.Yaku" json:"yaku,omitempty"`
	// Han value
	Han                  int64    `protobuf:"varint,2,opt,name=han,proto3" json:"han,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YakuValue) Reset()         { *m = YakuValue{} }
func (m *YakuValue) String() string { return proto.CompactTextString(m) }
func (*YakuValue) ProtoMessage()    {}
func (*YakuValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_77d945c42c8401a4, []int{0}
}

func (m *YakuValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YakuValue.Unmarshal(m, b)
}
func (m *YakuValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YakuValue.Marshal(b, m, deterministic)
}
func (m *YakuValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YakuValue.Merge(m, src)
}
func (m *YakuValue) XXX_Size() int {
	return xxx_messageInfo_YakuValue.Size(m)
}
func (m *YakuValue) XXX_DiscardUnknown() {
	xxx_messageInfo_YakuValue.DiscardUnknown(m)
}

var xxx_messageInfo_YakuValue proto.InternalMessageInfo

func (m *YakuValue) GetYaku() Yaku {
	if m != nil {
		return m.Yaku
	}
	return Yaku_YAKU_UNSPECIFIED
}

func (m *YakuValue) GetHan() int64 {
	if m != nil {
		return m.Han
	}
	return 0
}

type YakumanValue struct {
	Yakuman Yakuman `protobuf:"varint,1,opt,name=yakuman,proto3,enum=mahjong.base.Yakuman" json:"yakuman,omitempty"`
	// Used 1 for single and 2 for double yakumans
	Multiplier           int64    `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YakumanValue) Reset()         { *m = YakumanValue{} }
func (m *YakumanValue) String() string { return proto.CompactTextString(m) }
func (*YakumanValue) ProtoMessage()    {}
func (*YakumanValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_77d945c42c8401a4, []int{1}
}

func (m *YakumanValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YakumanValue.Unmarshal(m, b)
}
func (m *YakumanValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YakumanValue.Marshal(b, m, deterministic)
}
func (m *YakumanValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YakumanValue.Merge(m, src)
}
func (m *YakumanValue) XXX_Size() int {
	return xxx_messageInfo_YakumanValue.Size(m)
}
func (m *YakumanValue) XXX_DiscardUnknown() {
	xxx_messageInfo_YakumanValue.DiscardUnknown(m)
}

var xxx_messageInfo_YakumanValue proto.InternalMessageInfo

func (m *YakumanValue) GetYakuman() Yakuman {
	if m != nil {
		return m.Yakuman
	}
	return Yakuman_YAKUMAN_UNSPECIFIED
}

func (m *YakumanValue) GetMultiplier() int64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func init() {
	proto.RegisterEnum("mahjong.base.Yaku", Yaku_name, Yaku_value)
	proto.RegisterEnum("mahjong.base.Yakuman", Yakuman_name, Yakuman_value)
	proto.RegisterType((*YakuValue)(nil), "mahjong.base.YakuValue")
	proto.RegisterType((*YakumanValue)(nil), "mahjong.base.YakumanValue")
}

func init() { proto.RegisterFile("public/base/yaku.proto", fileDescriptor_77d945c42c8401a4) }

var fileDescriptor_77d945c42c8401a4 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x54, 0x5b, 0x53, 0x13, 0x4d,
	0x10, 0xfd, 0x72, 0x4f, 0x26, 0x17, 0x9a, 0xe1, 0xfa, 0x79, 0x41, 0x44, 0x45, 0x44, 0xc9, 0x96,
	0x52, 0x96, 0xe5, 0xe3, 0x90, 0x2c, 0xcc, 0xb0, 0x32, 0x93, 0xda, 0xdd, 0xd6, 0x8a, 0x2f, 0xa9,
	0x0d, 0x06, 0x88, 0xe4, 0x56, 0x48, 0xac, 0xe2, 0xd1, 0x9f, 0xe0, 0x3f, 0xb6, 0x7a, 0x76, 0x13,
	0x52, 0xfa, 0x76, 0xce, 0xf4, 0x39, 0xdd, 0x99, 0x93, 0x9e, 0x65, 0xeb, 0x93, 0x69, 0x77, 0xd0,
	0x3f, 0x77, 0xba, 0xd1, 0x8f, 0x9e, 0x73, 0x17, 0x5d, 0x4f, 0xeb, 0x93, 0x9b, 0xf1, 0xed, 0x98,
	0x57, 0x86, 0xd1, 0xd5, 0xf7, 0xf1, 0xe8, 0xb2, 0x4e, 0x85, 0x1d, 0x97, 0x95, 0xda, 0xd1, 0xf5,
	0xf4, 0x73, 0x34, 0x98, 0xf6, 0xf8, 0x2e, 0xcb, 0x92, 0x70, 0x33, 0xb5, 0x9d, 0xda, 0xab, 0xbd,
	0xe3, 0xf5, 0x45, 0x65, 0x9d, 0x64, 0xbe, 0xad, 0x73, 0x60, 0x99, 0xab, 0x68, 0xb4, 0x99, 0xde,
	0x4e, 0xed, 0x65, 0x7c, 0x82, 0x3b, 0x1d, 0x56, 0xa1, 0xfa, 0x30, 0x1a, 0xc5, 0x9d, 0x1c, 0x56,
	0xb8, 0x8b, 0x79, 0xd2, 0x6c, 0xed, 0xdf, 0x66, 0xc3, 0x68, 0xe4, 0xcf, 0x54, 0x7c, 0x8b, 0xb1,
	0xe1, 0x74, 0x70, 0xdb, 0x9f, 0x0c, 0xfa, 0xbd, 0x9b, 0xa4, 0xf3, 0xc2, 0xc9, 0xfe, 0xaf, 0x1c,
	0xcb, 0x92, 0x89, 0xaf, 0x32, 0x68, 0x0b, 0x0f, 0x3b, 0xa8, 0x83, 0x96, 0xdb, 0x50, 0xc7, 0xca,
	0x6d, 0xc2, 0x7f, 0x9c, 0xb1, 0xbc, 0xaf, 0x54, 0x43, 0x2a, 0x48, 0x11, 0x6e, 0x8a, 0x23, 0xf4,
	0x15, 0xa4, 0x79, 0x99, 0x15, 0x54, 0xab, 0x25, 0xc2, 0x00, 0x21, 0xc3, 0x4b, 0x2c, 0x17, 0x06,
	0x78, 0x66, 0x20, 0x4b, 0x9a, 0x50, 0xe8, 0xb6, 0x30, 0x90, 0x23, 0xdc, 0x90, 0x42, 0x87, 0x02,
	0xf2, 0xa4, 0x3f, 0x45, 0x4d, 0x14, 0x0a, 0xbc, 0xc2, 0x8a, 0xd2, 0x68, 0xdf, 0x60, 0x68, 0xa0,
	0x48, 0x25, 0x1a, 0x2c, 0x85, 0x82, 0x12, 0x2f, 0xb2, 0xac, 0x14, 0x1e, 0x02, 0xa3, 0xa6, 0xd2,
	0xf6, 0x2f, 0xd3, 0x61, 0x43, 0xa2, 0x86, 0x0a, 0xaf, 0x31, 0xf6, 0x45, 0xe9, 0x66, 0xc7, 0x37,
	0xa8, 0x9b, 0x50, 0xe5, 0x55, 0x56, 0xb2, 0x3c, 0x70, 0x3f, 0x1d, 0x43, 0x8d, 0x17, 0x58, 0x26,
	0x34, 0x1a, 0x96, 0x08, 0x68, 0xa1, 0x01, 0x08, 0x04, 0xa7, 0x02, 0x96, 0x09, 0xb4, 0x5c, 0x05,
	0x9c, 0x86, 0x93, 0xba, 0x43, 0xc2, 0x95, 0x39, 0x23, 0xf5, 0xea, 0x9c, 0x91, 0x65, 0x6d, 0xce,
	0xc8, 0xb7, 0x4e, 0xa3, 0xec, 0x54, 0x6b, 0xdc, 0xb8, 0xa7, 0xe4, 0xdc, 0xbc, 0xa7, 0x64, 0xfd,
	0xff, 0x9e, 0x92, 0xf7, 0x01, 0x5d, 0xb1, 0x21, 0x95, 0x0a, 0x8d, 0x82, 0x87, 0x36, 0x22, 0x63,
	0xf1, 0x23, 0x3b, 0x42, 0x68, 0xa1, 0x3d, 0x83, 0xf0, 0x98, 0x5c, 0x81, 0xd0, 0x9e, 0xd0, 0x74,
	0xed, 0xad, 0xa4, 0x18, 0x48, 0xe3, 0x21, 0x3c, 0xa1, 0xab, 0x07, 0xd2, 0x60, 0x20, 0xf4, 0x89,
	0xab, 0x61, 0x9b, 0xf2, 0x69, 0x29, 0x7d, 0x8c, 0xf0, 0x34, 0xf9, 0x33, 0x5c, 0xe5, 0x19, 0xd8,
	0x21, 0x9d, 0xdf, 0x16, 0xda, 0x52, 0x84, 0x67, 0xa4, 0x53, 0x61, 0x80, 0x08, 0xcf, 0x39, 0x67,
	0xb5, 0x59, 0xc3, 0xa6, 0x41, 0x2a, 0xbf, 0x20, 0xaf, 0x34, 0x9a, 0x14, 0xb0, 0x4b, 0x13, 0x1b,
	0x52, 0xc5, 0xec, 0x25, 0xc5, 0xde, 0x34, 0xbe, 0x80, 0x3d, 0x12, 0xa1, 0x2f, 0x2c, 0x79, 0x45,
	0x44, 0x78, 0x31, 0xd9, 0xe7, 0xcb, 0xac, 0xea, 0xbb, 0x5a, 0x1a, 0xec, 0x9c, 0x09, 0x7d, 0x22,
	0x34, 0xbc, 0xa6, 0xfb, 0x49, 0xa1, 0x42, 0x57, 0xc1, 0x1b, 0x8b, 0x0d, 0x12, 0x3e, 0x20, 0x9f,
	0xaf, 0x74, 0x40, 0x2b, 0x50, 0x8f, 0x13, 0xb1, 0x77, 0x05, 0x67, 0xff, 0x77, 0x9a, 0x15, 0x92,
	0xc5, 0xe5, 0x1b, 0x6c, 0x85, 0xb6, 0xe1, 0x4c, 0xe8, 0xbf, 0x36, 0xb1, 0xcc, 0x0a, 0x9e, 0xf1,
	0x30, 0xb0, 0xab, 0x58, 0x65, 0xa5, 0x84, 0xbc, 0x3d, 0x84, 0xb4, 0x0d, 0x0e, 0x31, 0x09, 0x2e,
	0x63, 0x83, 0x43, 0x8c, 0x53, 0xcd, 0xd2, 0x4f, 0x9c, 0xb1, 0x50, 0x68, 0x4f, 0x41, 0x8e, 0xf4,
	0x4d, 0xa1, 0x92, 0x28, 0xf3, 0xf3, 0x68, 0xd1, 0x76, 0x2f, 0xcc, 0xca, 0x31, 0x2d, 0xda, 0x3f,
	0xb3, 0x8d, 0xa8, 0x54, 0x60, 0x10, 0x4a, 0xd4, 0x3d, 0x0c, 0x12, 0xc6, 0xa8, 0x48, 0x91, 0xc5,
	0xcb, 0x5c, 0xe6, 0xc0, 0x2a, 0x0d, 0x89, 0xe8, 0xbb, 0xba, 0x65, 0x4c, 0x68, 0xa0, 0x42, 0xe3,
	0x17, 0x4f, 0x3e, 0x42, 0xd5, 0x6e, 0x80, 0x0d, 0x0d, 0x6a, 0xf1, 0x23, 0x51, 0x84, 0x97, 0xec,
	0x63, 0x8b, 0xcf, 0xe1, 0xe8, 0xc3, 0xd7, 0xf7, 0x97, 0xfd, 0xdb, 0xab, 0x69, 0xb7, 0x7e, 0x3e,
	0x1e, 0x3a, 0xdf, 0x46, 0xe3, 0x9f, 0xfd, 0xeb, 0xf1, 0xc5, 0x85, 0x93, 0xbc, 0xf6, 0x83, 0x68,
	0xd2, 0x77, 0x2e, 0x7b, 0x23, 0xfb, 0xe9, 0x71, 0x16, 0xbe, 0x48, 0xdd, 0xbc, 0x3d, 0x3a, 0xfc,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x36, 0x32, 0x9c, 0x35, 0xa7, 0x04, 0x00, 0x00,
}
