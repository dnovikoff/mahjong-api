// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.13.0
// source: public/rules/rules.proto

package rules

import (
	base "github.com/dnovikoff/mahjong-api/genproto/public/base"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KanDoraOpen int32

const (
	KanDoraOpen_KANDORA_OPEN_UNSPECEFIED KanDoraOpen = 0
	// No kan dora open in JPML-A
	KanDoraOpen_DONT_OPEN KanDoraOpen = 1
	// Instant dora open in EMA
	KanDoraOpen_INSTANT KanDoraOpen = 2
	// Afer next kan call or drop (for opened kans)
	KanDoraOpen_AFTER_ACTION KanDoraOpen = 3
)

// Enum value maps for KanDoraOpen.
var (
	KanDoraOpen_name = map[int32]string{
		0: "KANDORA_OPEN_UNSPECEFIED",
		1: "DONT_OPEN",
		2: "INSTANT",
		3: "AFTER_ACTION",
	}
	KanDoraOpen_value = map[string]int32{
		"KANDORA_OPEN_UNSPECEFIED": 0,
		"DONT_OPEN":                1,
		"INSTANT":                  2,
		"AFTER_ACTION":             3,
	}
)

func (x KanDoraOpen) Enum() *KanDoraOpen {
	p := new(KanDoraOpen)
	*p = x
	return p
}

func (x KanDoraOpen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KanDoraOpen) Descriptor() protoreflect.EnumDescriptor {
	return file_public_rules_rules_proto_enumTypes[0].Descriptor()
}

func (KanDoraOpen) Type() protoreflect.EnumType {
	return &file_public_rules_rules_proto_enumTypes[0]
}

func (x KanDoraOpen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KanDoraOpen.Descriptor instead.
func (KanDoraOpen) EnumDescriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{0}
}

type Atodzuke int32

const (
	Atodzuke_ATODZUKE_UNSPECIFIED Atodzuke = 0
	Atodzuke_ATODZUKE_ALLOWED     Atodzuke = 1
	// Allowed when all waits gives some yaku.
	Atodzuke_ATODZUKE_FORBIDDEN_SOFT Atodzuke = 2
	// Should already have yaku. Eg. syanpon for both yakuhai does not fit.
	Atodzuke_ATODZUKE_FORBIDDEN_STRICT Atodzuke = 3
)

// Enum value maps for Atodzuke.
var (
	Atodzuke_name = map[int32]string{
		0: "ATODZUKE_UNSPECIFIED",
		1: "ATODZUKE_ALLOWED",
		2: "ATODZUKE_FORBIDDEN_SOFT",
		3: "ATODZUKE_FORBIDDEN_STRICT",
	}
	Atodzuke_value = map[string]int32{
		"ATODZUKE_UNSPECIFIED":      0,
		"ATODZUKE_ALLOWED":          1,
		"ATODZUKE_FORBIDDEN_SOFT":   2,
		"ATODZUKE_FORBIDDEN_STRICT": 3,
	}
)

func (x Atodzuke) Enum() *Atodzuke {
	p := new(Atodzuke)
	*p = x
	return p
}

func (x Atodzuke) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Atodzuke) Descriptor() protoreflect.EnumDescriptor {
	return file_public_rules_rules_proto_enumTypes[1].Descriptor()
}

func (Atodzuke) Type() protoreflect.EnumType {
	return &file_public_rules_rules_proto_enumTypes[1]
}

func (x Atodzuke) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Atodzuke.Descriptor instead.
func (Atodzuke) EnumDescriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{1}
}

type AgariYame int32

const (
	AgariYame_AGARI_YAME_UNSPECIFIED AgariYame = 0
	// Game ends.
	AgariYame_IMPLICIT_END AgariYame = 1
	// Game might be continued (player asked). (TODO: Implement)
	AgariYame_EXPLICIT_CONTINUE AgariYame = 2
	// Game must be continued.
	AgariYame_IMPLICIT_CONTINUE AgariYame = 3
)

// Enum value maps for AgariYame.
var (
	AgariYame_name = map[int32]string{
		0: "AGARI_YAME_UNSPECIFIED",
		1: "IMPLICIT_END",
		2: "EXPLICIT_CONTINUE",
		3: "IMPLICIT_CONTINUE",
	}
	AgariYame_value = map[string]int32{
		"AGARI_YAME_UNSPECIFIED": 0,
		"IMPLICIT_END":           1,
		"EXPLICIT_CONTINUE":      2,
		"IMPLICIT_CONTINUE":      3,
	}
)

func (x AgariYame) Enum() *AgariYame {
	p := new(AgariYame)
	*p = x
	return p
}

func (x AgariYame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgariYame) Descriptor() protoreflect.EnumDescriptor {
	return file_public_rules_rules_proto_enumTypes[2].Descriptor()
}

func (AgariYame) Type() protoreflect.EnumType {
	return &file_public_rules_rules_proto_enumTypes[2]
}

func (x AgariYame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgariYame.Descriptor instead.
func (AgariYame) EnumDescriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{2}
}

type Shifting int32

const (
	Shifting_SHIFTING_UNSPECIFIED Shifting = 0
	Shifting_SHIFTING_ALLOWED     Shifting = 1
	// Only shifting alloed. Ex. for 34+5, 2=allowed, 5=forbidden
	Shifting_SHIFTING_FORBIDDEN_SOFT Shifting = 2
	// for 24+5 both 2 and 5 forbidden
	Shifting_SHIFTING_FORBIDDEN_STRICT Shifting = 3
)

// Enum value maps for Shifting.
var (
	Shifting_name = map[int32]string{
		0: "SHIFTING_UNSPECIFIED",
		1: "SHIFTING_ALLOWED",
		2: "SHIFTING_FORBIDDEN_SOFT",
		3: "SHIFTING_FORBIDDEN_STRICT",
	}
	Shifting_value = map[string]int32{
		"SHIFTING_UNSPECIFIED":      0,
		"SHIFTING_ALLOWED":          1,
		"SHIFTING_FORBIDDEN_SOFT":   2,
		"SHIFTING_FORBIDDEN_STRICT": 3,
	}
)

func (x Shifting) Enum() *Shifting {
	p := new(Shifting)
	*p = x
	return p
}

func (x Shifting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Shifting) Descriptor() protoreflect.EnumDescriptor {
	return file_public_rules_rules_proto_enumTypes[3].Descriptor()
}

func (Shifting) Type() protoreflect.EnumType {
	return &file_public_rules_rules_proto_enumTypes[3]
}

func (x Shifting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Shifting.Descriptor instead.
func (Shifting) EnumDescriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{3}
}

type Yaku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTanyao bool `protobuf:"varint,1,opt,name=open_tanyao,json=openTanyao,proto3" json:"open_tanyao,omitempty"`
	// Does rinshan combine with haitei
	HaiteiFromLiveOnly bool `protobuf:"varint,2,opt,name=haitei_from_live_only,json=haiteiFromLiveOnly,proto3" json:"haitei_from_live_only,omitempty"`
	Ura                bool `protobuf:"varint,3,opt,name=ura,proto3" json:"ura,omitempty"`
	// No ipatsu in JPML-A
	Ipatsu  bool            `protobuf:"varint,4,opt,name=ipatsu,proto3" json:"ipatsu,omitempty"`
	AkaDora *base.Instances `protobuf:"bytes,5,opt,name=aka_dora,json=akaDora,proto3" json:"aka_dora,omitempty"`
	Renhou  base.Limit      `protobuf:"varint,6,opt,name=renhou,proto3,enum=mahjong.base.Limit" json:"renhou,omitempty"`
	// No tsumo 2 fu for rinshan in jpmla
	RinshanFu bool `protobuf:"varint,7,opt,name=rinshan_fu,json=rinshanFu,proto3" json:"rinshan_fu,omitempty"`
	// Green required for ryuuiisou yakuman in jpmla
	GreenRequired bool `protobuf:"varint,8,opt,name=green_required,json=greenRequired,proto3" json:"green_required,omitempty"`
}

func (x *Yaku) Reset() {
	*x = Yaku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Yaku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Yaku) ProtoMessage() {}

func (x *Yaku) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Yaku.ProtoReflect.Descriptor instead.
func (*Yaku) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{0}
}

func (x *Yaku) GetOpenTanyao() bool {
	if x != nil {
		return x.OpenTanyao
	}
	return false
}

func (x *Yaku) GetHaiteiFromLiveOnly() bool {
	if x != nil {
		return x.HaiteiFromLiveOnly
	}
	return false
}

func (x *Yaku) GetUra() bool {
	if x != nil {
		return x.Ura
	}
	return false
}

func (x *Yaku) GetIpatsu() bool {
	if x != nil {
		return x.Ipatsu
	}
	return false
}

func (x *Yaku) GetAkaDora() *base.Instances {
	if x != nil {
		return x.AkaDora
	}
	return nil
}

func (x *Yaku) GetRenhou() base.Limit {
	if x != nil {
		return x.Renhou
	}
	return base.Limit(0)
}

func (x *Yaku) GetRinshanFu() bool {
	if x != nil {
		return x.RinshanFu
	}
	return false
}

func (x *Yaku) GetGreenRequired() bool {
	if x != nil {
		return x.GreenRequired
	}
	return false
}

type Scoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 7700 rounds to 8000
	ManganRound  bool `protobuf:"varint,1,opt,name=mangan_round,json=manganRound,proto3" json:"mangan_round,omitempty"`
	KazoeYakuman bool `protobuf:"varint,2,opt,name=kazoe_yakuman,json=kazoeYakuman,proto3" json:"kazoe_yakuman,omitempty"`
	YakumanSum   bool `protobuf:"varint,3,opt,name=yakuman_sum,json=yakumanSum,proto3" json:"yakuman_sum,omitempty"`
	// The default should be 100, but could differ in some rules (eg. 500)
	HonbaMoney     int64          `protobuf:"varint,4,opt,name=honba_money,json=honbaMoney,proto3" json:"honba_money,omitempty"`
	DoubleYakumans []base.Yakuman `protobuf:"varint,5,rep,packed,name=double_yakumans,json=doubleYakumans,proto3,enum=mahjong.base.Yakuman" json:"double_yakumans,omitempty"`
}

func (x *Scoring) Reset() {
	*x = Scoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scoring) ProtoMessage() {}

func (x *Scoring) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scoring.ProtoReflect.Descriptor instead.
func (*Scoring) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{1}
}

func (x *Scoring) GetManganRound() bool {
	if x != nil {
		return x.ManganRound
	}
	return false
}

func (x *Scoring) GetKazoeYakuman() bool {
	if x != nil {
		return x.KazoeYakuman
	}
	return false
}

func (x *Scoring) GetYakumanSum() bool {
	if x != nil {
		return x.YakumanSum
	}
	return false
}

func (x *Scoring) GetHonbaMoney() int64 {
	if x != nil {
		return x.HonbaMoney
	}
	return 0
}

func (x *Scoring) GetDoubleYakumans() []base.Yakuman {
	if x != nil {
		return x.DoubleYakumans
	}
	return nil
}

type Draw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winds   bool `protobuf:"varint,1,opt,name=winds,proto3" json:"winds,omitempty"`
	Kokushi bool `protobuf:"varint,2,opt,name=kokushi,proto3" json:"kokushi,omitempty"`
	Kans    bool `protobuf:"varint,3,opt,name=kans,proto3" json:"kans,omitempty"`
	Riichi  bool `protobuf:"varint,4,opt,name=riichi,proto3" json:"riichi,omitempty"`
	Ron3    bool `protobuf:"varint,5,opt,name=ron3,proto3" json:"ron3,omitempty"`
}

func (x *Draw) Reset() {
	*x = Draw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Draw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Draw) ProtoMessage() {}

func (x *Draw) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Draw.ProtoReflect.Descriptor instead.
func (*Draw) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{2}
}

func (x *Draw) GetWinds() bool {
	if x != nil {
		return x.Winds
	}
	return false
}

func (x *Draw) GetKokushi() bool {
	if x != nil {
		return x.Kokushi
	}
	return false
}

func (x *Draw) GetKans() bool {
	if x != nil {
		return x.Kans
	}
	return false
}

func (x *Draw) GetRiichi() bool {
	if x != nil {
		return x.Riichi
	}
	return false
}

func (x *Draw) GetRon3() bool {
	if x != nil {
		return x.Ron3
	}
	return false
}

type Pao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winds   bool `protobuf:"varint,1,opt,name=winds,proto3" json:"winds,omitempty"`
	Dragons bool `protobuf:"varint,2,opt,name=dragons,proto3" json:"dragons,omitempty"`
	Kans    bool `protobuf:"varint,3,opt,name=kans,proto3" json:"kans,omitempty"`
	Rinshan bool `protobuf:"varint,4,opt,name=rinshan,proto3" json:"rinshan,omitempty"`
}

func (x *Pao) Reset() {
	*x = Pao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pao) ProtoMessage() {}

func (x *Pao) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pao.ProtoReflect.Descriptor instead.
func (*Pao) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{3}
}

func (x *Pao) GetWinds() bool {
	if x != nil {
		return x.Winds
	}
	return false
}

func (x *Pao) GetDragons() bool {
	if x != nil {
		return x.Dragons
	}
	return false
}

func (x *Pao) GetKans() bool {
	if x != nil {
		return x.Kans
	}
	return false
}

func (x *Pao) GetRinshan() bool {
	if x != nil {
		return x.Rinshan
	}
	return false
}

// Complex uma (binta) is used in JPML-A.
// Still classic uma could be described this way with all 3 field equal.
type ComplexUma struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultMoney []int64 `protobuf:"zigzag64,1,rep,packed,name=default_money,json=defaultMoney,proto3" json:"default_money,omitempty"`
	Minus1Money  []int64 `protobuf:"zigzag64,2,rep,packed,name=minus1_money,json=minus1Money,proto3" json:"minus1_money,omitempty"`
	Plus1Money   []int64 `protobuf:"zigzag64,3,rep,packed,name=plus1_money,json=plus1Money,proto3" json:"plus1_money,omitempty"`
}

func (x *ComplexUma) Reset() {
	*x = ComplexUma{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexUma) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexUma) ProtoMessage() {}

func (x *ComplexUma) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexUma.ProtoReflect.Descriptor instead.
func (*ComplexUma) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{4}
}

func (x *ComplexUma) GetDefaultMoney() []int64 {
	if x != nil {
		return x.DefaultMoney
	}
	return nil
}

func (x *ComplexUma) GetMinus1Money() []int64 {
	if x != nil {
		return x.Minus1Money
	}
	return nil
}

func (x *ComplexUma) GetPlus1Money() []int64 {
	if x != nil {
		return x.Plus1Money
	}
	return nil
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dealer could end the game if first in orasu.
	AgariYame              AgariYame `protobuf:"varint,1,opt,name=agari_yame,json=agariYame,proto3,enum=mahjong.rules.AgariYame" json:"agari_yame,omitempty"`
	ChiShift               Shifting  `protobuf:"varint,2,opt,name=chi_shift,json=chiShift,proto3,enum=mahjong.rules.Shifting" json:"chi_shift,omitempty"`
	EndByBancrocity        bool      `protobuf:"varint,3,opt,name=end_by_bancrocity,json=endByBancrocity,proto3" json:"end_by_bancrocity,omitempty"`
	Nagashi                bool      `protobuf:"varint,4,opt,name=nagashi,proto3" json:"nagashi,omitempty"`
	Atamahane              bool      `protobuf:"varint,5,opt,name=atamahane,proto3" json:"atamahane,omitempty"`
	HonbaPayedToAll        bool      `protobuf:"varint,6,opt,name=honba_payed_to_all,json=honbaPayedToAll,proto3" json:"honba_payed_to_all,omitempty"`
	RiichiReturnOnMultiron bool      `protobuf:"varint,7,opt,name=riichi_return_on_multiron,json=riichiReturnOnMultiron,proto3" json:"riichi_return_on_multiron,omitempty"`
	// Chi priority if clicked first.
	SpeedChi bool `protobuf:"varint,8,opt,name=speed_chi,json=speedChi,proto3" json:"speed_chi,omitempty"`
	// Calls displayed, event if waiting for a higher priority choises.
	SayOnClick               bool     `protobuf:"varint,9,opt,name=say_on_click,json=sayOnClick,proto3" json:"say_on_click,omitempty"`
	ShouldHaveMoneyForRiichi bool     `protobuf:"varint,10,opt,name=should_have_money_for_riichi,json=shouldHaveMoneyForRiichi,proto3" json:"should_have_money_for_riichi,omitempty"`
	Atodzuke                 Atodzuke `protobuf:"varint,11,opt,name=atodzuke,proto3,enum=mahjong.rules.Atodzuke" json:"atodzuke,omitempty"`
	StartMoney               int64    `protobuf:"varint,12,opt,name=start_money,json=startMoney,proto3" json:"start_money,omitempty"`
	// At the end of the game, money reduced by start points
	EndReduceMoney int64 `protobuf:"varint,13,opt,name=end_reduce_money,json=endReduceMoney,proto3" json:"end_reduce_money,omitempty"`
	OkaMoney       int64 `protobuf:"varint,14,opt,name=oka_money,json=okaMoney,proto3" json:"oka_money,omitempty"`
	// Ex. At least 30000 to end the game.
	MinWinMoney int64 `protobuf:"varint,15,opt,name=min_win_money,json=minWinMoney,proto3" json:"min_win_money,omitempty"`
	// Ex. West for hanchans, until min_win_money condition fits.
	MaxLastWind base.Wind `protobuf:"varint,16,opt,name=max_last_wind,json=maxLastWind,proto3,enum=mahjong.base.Wind" json:"max_last_wind,omitempty"`
	// Ex. East for hanchans. Could end here if conditions meets.
	LastWind    base.Wind   `protobuf:"varint,17,opt,name=last_wind,json=lastWind,proto3,enum=mahjong.base.Wind" json:"last_wind,omitempty"`
	Uma         *ComplexUma `protobuf:"bytes,18,opt,name=uma,proto3" json:"uma,omitempty"`
	Draw        *Draw       `protobuf:"bytes,19,opt,name=draw,proto3" json:"draw,omitempty"`
	KanDoraOpen KanDoraOpen `protobuf:"varint,20,opt,name=kan_dora_open,json=kanDoraOpen,proto3,enum=mahjong.rules.KanDoraOpen" json:"kan_dora_open,omitempty"`
	// In case of same points, players share uma.
	UmaShare bool `protobuf:"varint,21,opt,name=uma_share,json=umaShare,proto3" json:"uma_share,omitempty"`
	// In case there are riichi sticks
	RiichiSticksGoesToFirst bool `protobuf:"varint,22,opt,name=riichi_sticks_goes_to_first,json=riichiSticksGoesToFirst,proto3" json:"riichi_sticks_goes_to_first,omitempty"`
	Pao                     *Pao `protobuf:"bytes,23,opt,name=pao,proto3" json:"pao,omitempty"`
	// Possible values: 2,3,4
	NumberOfPlayers int64 `protobuf:"varint,24,opt,name=number_of_players,json=numberOfPlayers,proto3" json:"number_of_players,omitempty"`
	// Not allowed in sanma
	ChiAllowed bool `protobuf:"varint,25,opt,name=chi_allowed,json=chiAllowed,proto3" json:"chi_allowed,omitempty"`
	// User asked if he wants to show noten (not for riichi)
	SuggestNotean bool `protobuf:"varint,26,opt,name=suggest_notean,json=suggestNotean,proto3" json:"suggest_notean,omitempty"`
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{5}
}

func (x *Game) GetAgariYame() AgariYame {
	if x != nil {
		return x.AgariYame
	}
	return AgariYame_AGARI_YAME_UNSPECIFIED
}

func (x *Game) GetChiShift() Shifting {
	if x != nil {
		return x.ChiShift
	}
	return Shifting_SHIFTING_UNSPECIFIED
}

func (x *Game) GetEndByBancrocity() bool {
	if x != nil {
		return x.EndByBancrocity
	}
	return false
}

func (x *Game) GetNagashi() bool {
	if x != nil {
		return x.Nagashi
	}
	return false
}

func (x *Game) GetAtamahane() bool {
	if x != nil {
		return x.Atamahane
	}
	return false
}

func (x *Game) GetHonbaPayedToAll() bool {
	if x != nil {
		return x.HonbaPayedToAll
	}
	return false
}

func (x *Game) GetRiichiReturnOnMultiron() bool {
	if x != nil {
		return x.RiichiReturnOnMultiron
	}
	return false
}

func (x *Game) GetSpeedChi() bool {
	if x != nil {
		return x.SpeedChi
	}
	return false
}

func (x *Game) GetSayOnClick() bool {
	if x != nil {
		return x.SayOnClick
	}
	return false
}

func (x *Game) GetShouldHaveMoneyForRiichi() bool {
	if x != nil {
		return x.ShouldHaveMoneyForRiichi
	}
	return false
}

func (x *Game) GetAtodzuke() Atodzuke {
	if x != nil {
		return x.Atodzuke
	}
	return Atodzuke_ATODZUKE_UNSPECIFIED
}

func (x *Game) GetStartMoney() int64 {
	if x != nil {
		return x.StartMoney
	}
	return 0
}

func (x *Game) GetEndReduceMoney() int64 {
	if x != nil {
		return x.EndReduceMoney
	}
	return 0
}

func (x *Game) GetOkaMoney() int64 {
	if x != nil {
		return x.OkaMoney
	}
	return 0
}

func (x *Game) GetMinWinMoney() int64 {
	if x != nil {
		return x.MinWinMoney
	}
	return 0
}

func (x *Game) GetMaxLastWind() base.Wind {
	if x != nil {
		return x.MaxLastWind
	}
	return base.Wind(0)
}

func (x *Game) GetLastWind() base.Wind {
	if x != nil {
		return x.LastWind
	}
	return base.Wind(0)
}

func (x *Game) GetUma() *ComplexUma {
	if x != nil {
		return x.Uma
	}
	return nil
}

func (x *Game) GetDraw() *Draw {
	if x != nil {
		return x.Draw
	}
	return nil
}

func (x *Game) GetKanDoraOpen() KanDoraOpen {
	if x != nil {
		return x.KanDoraOpen
	}
	return KanDoraOpen_KANDORA_OPEN_UNSPECEFIED
}

func (x *Game) GetUmaShare() bool {
	if x != nil {
		return x.UmaShare
	}
	return false
}

func (x *Game) GetRiichiSticksGoesToFirst() bool {
	if x != nil {
		return x.RiichiSticksGoesToFirst
	}
	return false
}

func (x *Game) GetPao() *Pao {
	if x != nil {
		return x.Pao
	}
	return nil
}

func (x *Game) GetNumberOfPlayers() int64 {
	if x != nil {
		return x.NumberOfPlayers
	}
	return 0
}

func (x *Game) GetChiAllowed() bool {
	if x != nil {
		return x.ChiAllowed
	}
	return false
}

func (x *Game) GetSuggestNotean() bool {
	if x != nil {
		return x.SuggestNotean
	}
	return false
}

type Ruleset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Scoring     *Scoring `protobuf:"bytes,3,opt,name=scoring,proto3" json:"scoring,omitempty"`
	Yaku        *Yaku    `protobuf:"bytes,4,opt,name=yaku,proto3" json:"yaku,omitempty"`
	Game        *Game    `protobuf:"bytes,5,opt,name=game,proto3" json:"game,omitempty"`
}

func (x *Ruleset) Reset() {
	*x = Ruleset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ruleset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ruleset) ProtoMessage() {}

func (x *Ruleset) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ruleset.ProtoReflect.Descriptor instead.
func (*Ruleset) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{6}
}

func (x *Ruleset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ruleset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ruleset) GetScoring() *Scoring {
	if x != nil {
		return x.Scoring
	}
	return nil
}

func (x *Ruleset) GetYaku() *Yaku {
	if x != nil {
		return x.Yaku
	}
	return nil
}

func (x *Ruleset) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

type Timeouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base time to think on server suggest. Ex. 10 seconds.
	// Max value: 30 seconds.
	// Min value: 5 seconds.
	Base *duration.Duration `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// Additional time to think in this round (if base time passed). Ex. 5 seconds.
	// Max value: 30 seconds.
	// Min value: 0. (or nil)
	Extra *duration.Duration `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	// If player makes a decition in base time, than recover time added to extra.
	// Limited by extra value. Ex. 1 second.
	// Value: >=0 (or nil)
	Recover *duration.Duration `protobuf:"bytes,3,opt,name=recover,proto3" json:"recover,omitempty"`
	// The game will move very fast in case there are no suggest.
	// This is a delay after each player action.
	// Max value: 1 second.
	// Could be 0 (nil) for robot games.
	Delay *duration.Duration `protobuf:"bytes,4,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Timeouts) Reset() {
	*x = Timeouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_rules_rules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timeouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeouts) ProtoMessage() {}

func (x *Timeouts) ProtoReflect() protoreflect.Message {
	mi := &file_public_rules_rules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeouts.ProtoReflect.Descriptor instead.
func (*Timeouts) Descriptor() ([]byte, []int) {
	return file_public_rules_rules_proto_rawDescGZIP(), []int{7}
}

func (x *Timeouts) GetBase() *duration.Duration {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *Timeouts) GetExtra() *duration.Duration {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Timeouts) GetRecover() *duration.Duration {
	if x != nil {
		return x.Recover
	}
	return nil
}

func (x *Timeouts) GetDelay() *duration.Duration {
	if x != nil {
		return x.Delay
	}
	return nil
}

var File_public_rules_rules_proto protoreflect.FileDescriptor

var file_public_rules_rules_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x79,
	0x61, 0x6b, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x04, 0x59, 0x61,
	0x6b, 0x75, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x6e, 0x79, 0x61,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x6e,
	0x79, 0x61, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x61, 0x69, 0x74, 0x65, 0x69, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x69, 0x74, 0x65, 0x69, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69,
	0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x61, 0x74,
	0x73, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x70, 0x61, 0x74, 0x73, 0x75,
	0x12, 0x32, 0x0a, 0x08, 0x61, 0x6b, 0x61, 0x5f, 0x64, 0x6f, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x07, 0x61, 0x6b, 0x61,
	0x44, 0x6f, 0x72, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x68, 0x6f, 0x75, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x68, 0x6f,
	0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e, 0x5f, 0x66, 0x75, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e, 0x46, 0x75,
	0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x07, 0x53, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x61, 0x7a, 0x6f, 0x65, 0x5f,
	0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b,
	0x61, 0x7a, 0x6f, 0x65, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x79,
	0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x6f, 0x6e, 0x62, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x68, 0x6f, 0x6e, 0x62, 0x61, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3e, 0x0a,
	0x0f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x79, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x0e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x59, 0x61, 0x6b, 0x75, 0x6d, 0x61, 0x6e, 0x73, 0x22, 0x76, 0x0a,
	0x04, 0x44, 0x72, 0x61, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x6f, 0x6b, 0x75, 0x73, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6b, 0x6f,
	0x6b, 0x75, 0x73, 0x68, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x69,
	0x63, 0x68, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x69, 0x69, 0x63, 0x68,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6e, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x72, 0x6f, 0x6e, 0x33, 0x22, 0x63, 0x0a, 0x03, 0x50, 0x61, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x69, 0x6e,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x61, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x69, 0x6e, 0x73, 0x68, 0x61, 0x6e, 0x22, 0x75, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x55, 0x6d, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x12, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x31, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x12, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x31, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x73, 0x31, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x73, 0x31, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x22, 0xf5, 0x08, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x67,
	0x61, 0x72, 0x69, 0x5f, 0x79, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41,
	0x67, 0x61, 0x72, 0x69, 0x59, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x61, 0x67, 0x61, 0x72, 0x69, 0x59,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x63, 0x72, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x63, 0x72,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x67, 0x61, 0x73, 0x68, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x61, 0x67, 0x61, 0x73, 0x68, 0x69, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x74, 0x61, 0x6d, 0x61, 0x68, 0x61, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x74, 0x61, 0x6d, 0x61, 0x68, 0x61, 0x6e, 0x65, 0x12, 0x2b, 0x0a,
	0x12, 0x68, 0x6f, 0x6e, 0x62, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x6f, 0x6e, 0x62, 0x61,
	0x50, 0x61, 0x79, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x69,
	0x69, 0x63, 0x68, 0x69, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x72, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72,
	0x69, 0x69, 0x63, 0x68, 0x69, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x72, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64, 0x43,
	0x68, 0x69, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x79, 0x4f, 0x6e, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x68,
	0x61, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x69,
	0x69, 0x63, 0x68, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x52, 0x69,
	0x69, 0x63, 0x68, 0x69, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x74, 0x6f, 0x64, 0x7a, 0x75, 0x6b, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x6f, 0x64, 0x7a, 0x75, 0x6b, 0x65, 0x52,
	0x08, 0x61, 0x74, 0x6f, 0x64, 0x7a, 0x75, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6b, 0x61, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x6b, 0x61, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x03, 0x75, 0x6d, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x55, 0x6d, 0x61, 0x52, 0x03, 0x75, 0x6d, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x3e, 0x0a, 0x0d, 0x6b, 0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x72, 0x61,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x4b, 0x61, 0x6e, 0x44,
	0x6f, 0x72, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x0b, 0x6b, 0x61, 0x6e, 0x44, 0x6f, 0x72, 0x61,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6d, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6d, 0x61, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69, 0x5f, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x5f, 0x67, 0x6f, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x69, 0x69, 0x63, 0x68, 0x69, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x73, 0x47, 0x6f, 0x65, 0x73, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x03, 0x70, 0x61, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x6f,
	0x52, 0x03, 0x70, 0x61, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x61, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x61, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x07, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x79, 0x61, 0x6b,
	0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x59, 0x61, 0x6b, 0x75, 0x52, 0x04, 0x79, 0x61,
	0x6b, 0x75, 0x12, 0x27, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x2a, 0x59,
	0x0a, 0x0b, 0x4b, 0x61, 0x6e, 0x44, 0x6f, 0x72, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x18, 0x4b, 0x41, 0x4e, 0x44, 0x4f, 0x52, 0x41, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x45, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x4f, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x08, 0x41, 0x74, 0x6f,
	0x64, 0x7a, 0x75, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54, 0x4f, 0x44, 0x5a, 0x55, 0x4b,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x54, 0x4f, 0x44, 0x5a, 0x55, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x54, 0x4f, 0x44, 0x5a, 0x55, 0x4b,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x53, 0x4f, 0x46, 0x54,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x54, 0x4f, 0x44, 0x5a, 0x55, 0x4b, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10,
	0x03, 0x2a, 0x67, 0x0a, 0x09, 0x41, 0x67, 0x61, 0x72, 0x69, 0x59, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x47, 0x41, 0x52, 0x49, 0x5f, 0x59, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4d,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x08, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x48, 0x49, 0x46, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x49, 0x46, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48, 0x49, 0x46, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x53, 0x4f, 0x46,
	0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x48, 0x49, 0x46, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54,
	0x10, 0x03, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6e, 0x6f, 0x76, 0x69, 0x6b, 0x6f, 0x66, 0x66, 0x2f, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_rules_rules_proto_rawDescOnce sync.Once
	file_public_rules_rules_proto_rawDescData = file_public_rules_rules_proto_rawDesc
)

func file_public_rules_rules_proto_rawDescGZIP() []byte {
	file_public_rules_rules_proto_rawDescOnce.Do(func() {
		file_public_rules_rules_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_rules_rules_proto_rawDescData)
	})
	return file_public_rules_rules_proto_rawDescData
}

var file_public_rules_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_public_rules_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_public_rules_rules_proto_goTypes = []interface{}{
	(KanDoraOpen)(0),          // 0: mahjong.rules.KanDoraOpen
	(Atodzuke)(0),             // 1: mahjong.rules.Atodzuke
	(AgariYame)(0),            // 2: mahjong.rules.AgariYame
	(Shifting)(0),             // 3: mahjong.rules.Shifting
	(*Yaku)(nil),              // 4: mahjong.rules.Yaku
	(*Scoring)(nil),           // 5: mahjong.rules.Scoring
	(*Draw)(nil),              // 6: mahjong.rules.Draw
	(*Pao)(nil),               // 7: mahjong.rules.Pao
	(*ComplexUma)(nil),        // 8: mahjong.rules.ComplexUma
	(*Game)(nil),              // 9: mahjong.rules.Game
	(*Ruleset)(nil),           // 10: mahjong.rules.Ruleset
	(*Timeouts)(nil),          // 11: mahjong.rules.Timeouts
	(*base.Instances)(nil),    // 12: mahjong.base.Instances
	(base.Limit)(0),           // 13: mahjong.base.Limit
	(base.Yakuman)(0),         // 14: mahjong.base.Yakuman
	(base.Wind)(0),            // 15: mahjong.base.Wind
	(*duration.Duration)(nil), // 16: google.protobuf.Duration
}
var file_public_rules_rules_proto_depIdxs = []int32{
	12, // 0: mahjong.rules.Yaku.aka_dora:type_name -> mahjong.base.Instances
	13, // 1: mahjong.rules.Yaku.renhou:type_name -> mahjong.base.Limit
	14, // 2: mahjong.rules.Scoring.double_yakumans:type_name -> mahjong.base.Yakuman
	2,  // 3: mahjong.rules.Game.agari_yame:type_name -> mahjong.rules.AgariYame
	3,  // 4: mahjong.rules.Game.chi_shift:type_name -> mahjong.rules.Shifting
	1,  // 5: mahjong.rules.Game.atodzuke:type_name -> mahjong.rules.Atodzuke
	15, // 6: mahjong.rules.Game.max_last_wind:type_name -> mahjong.base.Wind
	15, // 7: mahjong.rules.Game.last_wind:type_name -> mahjong.base.Wind
	8,  // 8: mahjong.rules.Game.uma:type_name -> mahjong.rules.ComplexUma
	6,  // 9: mahjong.rules.Game.draw:type_name -> mahjong.rules.Draw
	0,  // 10: mahjong.rules.Game.kan_dora_open:type_name -> mahjong.rules.KanDoraOpen
	7,  // 11: mahjong.rules.Game.pao:type_name -> mahjong.rules.Pao
	5,  // 12: mahjong.rules.Ruleset.scoring:type_name -> mahjong.rules.Scoring
	4,  // 13: mahjong.rules.Ruleset.yaku:type_name -> mahjong.rules.Yaku
	9,  // 14: mahjong.rules.Ruleset.game:type_name -> mahjong.rules.Game
	16, // 15: mahjong.rules.Timeouts.base:type_name -> google.protobuf.Duration
	16, // 16: mahjong.rules.Timeouts.extra:type_name -> google.protobuf.Duration
	16, // 17: mahjong.rules.Timeouts.recover:type_name -> google.protobuf.Duration
	16, // 18: mahjong.rules.Timeouts.delay:type_name -> google.protobuf.Duration
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_public_rules_rules_proto_init() }
func file_public_rules_rules_proto_init() {
	if File_public_rules_rules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_rules_rules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Yaku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_rules_rules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_rules_rules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Draw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_rules_rules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_rules_rules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexUma); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_rules_rules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_rules_rules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ruleset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_rules_rules_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timeouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_rules_rules_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_rules_rules_proto_goTypes,
		DependencyIndexes: file_public_rules_rules_proto_depIdxs,
		EnumInfos:         file_public_rules_rules_proto_enumTypes,
		MessageInfos:      file_public_rules_rules_proto_msgTypes,
	}.Build()
	File_public_rules_rules_proto = out.File
	file_public_rules_rules_proto_rawDesc = nil
	file_public_rules_rules_proto_goTypes = nil
	file_public_rules_rules_proto_depIdxs = nil
}
