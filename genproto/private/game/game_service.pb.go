// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: private/game/game_service.proto

package game

import (
	context "context"
	log "github.com/dnovikoff/mahjong-api/genproto/public/log"
	rules "github.com/dnovikoff/mahjong-api/genproto/public/rules"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlayerType int32

const (
	PlayerType_PLAYER_TYPE_UNSPECIFIED PlayerType = 0
	// Expects that player will connect with Play method
	PlayerType_CLIENT PlayerType = 1
	// Predefined robots
	// Drops taken tiles
	PlayerType_ROBOT_TSUMOGIRI PlayerType = 2
	// Robot will try to play according to uke-ire
	PlayerType_ROBOT_EFFECTIVE PlayerType = 3
)

// Enum value maps for PlayerType.
var (
	PlayerType_name = map[int32]string{
		0: "PLAYER_TYPE_UNSPECIFIED",
		1: "CLIENT",
		2: "ROBOT_TSUMOGIRI",
		3: "ROBOT_EFFECTIVE",
	}
	PlayerType_value = map[string]int32{
		"PLAYER_TYPE_UNSPECIFIED": 0,
		"CLIENT":                  1,
		"ROBOT_TSUMOGIRI":         2,
		"ROBOT_EFFECTIVE":         3,
	}
)

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_private_game_game_service_proto_enumTypes[0].Descriptor()
}

func (PlayerType) Type() protoreflect.EnumType {
	return &file_private_game_game_service_proto_enumTypes[0]
}

func (x PlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerType.Descriptor instead.
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return file_private_game_game_service_proto_rawDescGZIP(), []int{0}
}

// The method of creating games is a subject to change.
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofRules:
	//	*CreateRequest_Rules
	//	*CreateRequest_RuleId
	OneofRules isCreateRequest_OneofRules `protobuf_oneof:"oneof_rules"`
	Timeouts   *rules.Timeouts            `protobuf:"bytes,3,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	// Should provide at least one Client player
	// Provide players in order, correspondig their EAST1 starting positions
	Players []*Player `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	// For debugging purposes and robots.
	// If provided - game will end after one round.
	// The conditions could be predefined.
	// If wall defined - will replace the wall with given values.
	// The number of tiles in wall could be reduced to at least 5 tiles.
	// Still all tiles should remain unique.
	// The exact number of tiles for indicators is 5.
	// The exact number of tiles for rinshan is 4.
	SingleRound *log.RoundInfo `protobuf:"bytes,5,opt,name=single_round,json=singleRound,proto3" json:"single_round,omitempty"`
	// Redefine random seed for predictable game
	Seed *wrappers.Int64Value `protobuf:"bytes,6,opt,name=seed,proto3" json:"seed,omitempty"`
	// Just output the result, with no actual game created (validation)
	DryRun bool `protobuf:"varint,7,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_private_game_game_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_private_game_game_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_private_game_game_service_proto_rawDescGZIP(), []int{0}
}

func (m *CreateRequest) GetOneofRules() isCreateRequest_OneofRules {
	if m != nil {
		return m.OneofRules
	}
	return nil
}

func (x *CreateRequest) GetRules() *rules.Ruleset {
	if x, ok := x.GetOneofRules().(*CreateRequest_Rules); ok {
		return x.Rules
	}
	return nil
}

func (x *CreateRequest) GetRuleId() string {
	if x, ok := x.GetOneofRules().(*CreateRequest_RuleId); ok {
		return x.RuleId
	}
	return ""
}

func (x *CreateRequest) GetTimeouts() *rules.Timeouts {
	if x != nil {
		return x.Timeouts
	}
	return nil
}

func (x *CreateRequest) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CreateRequest) GetSingleRound() *log.RoundInfo {
	if x != nil {
		return x.SingleRound
	}
	return nil
}

func (x *CreateRequest) GetSeed() *wrappers.Int64Value {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *CreateRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type isCreateRequest_OneofRules interface {
	isCreateRequest_OneofRules()
}

type CreateRequest_Rules struct {
	Rules *rules.Ruleset `protobuf:"bytes,1,opt,name=rules,proto3,oneof"`
}

type CreateRequest_RuleId struct {
	RuleId string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3,oneof"`
}

func (*CreateRequest_Rules) isCreateRequest_OneofRules() {}

func (*CreateRequest_RuleId) isCreateRequest_OneofRules() {}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of created game. Later used to get log ID.
	// Could be any string, generated by server. Client should not rely on id format.
	GameId string         `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Rules  *rules.Ruleset `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
	// Client players will be given tokens to join the game
	Players []*Player `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	// Please play the game in a given time
	Ttl *duration.Duration `protobuf:"bytes,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_private_game_game_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_private_game_game_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_private_game_game_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *CreateResponse) GetRules() *rules.Ruleset {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CreateResponse) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CreateResponse) GetTtl() *duration.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name displayed
	Caption string `protobuf:"bytes,1,opt,name=caption,proto3" json:"caption,omitempty"`
	// Should not fill in request. Will be filled in reply
	// Could be any string, generated by server. Client should not rely on id format.
	Token      string     `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	PlayerType PlayerType `protobuf:"varint,3,opt,name=player_type,json=playerType,proto3,enum=mahjong.private.game.PlayerType" json:"player_type,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_private_game_game_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_private_game_game_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_private_game_game_service_proto_rawDescGZIP(), []int{2}
}

func (x *Player) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *Player) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Player) GetPlayerType() PlayerType {
	if x != nil {
		return x.PlayerType
	}
	return PlayerType_PLAYER_TYPE_UNSPECIFIED
}

var File_private_game_game_service_proto protoreflect.FileDescriptor

var file_private_game_game_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x6c, 0x6f, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x22, 0x7b, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x41,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x2a, 0x5f, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x42, 0x4f,
	0x54, 0x5f, 0x54, 0x53, 0x55, 0x4d, 0x4f, 0x47, 0x49, 0x52, 0x49, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x03, 0x32, 0x62, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x53, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6e, 0x6f, 0x76, 0x69, 0x6b, 0x6f, 0x66, 0x66, 0x2f, 0x6d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_private_game_game_service_proto_rawDescOnce sync.Once
	file_private_game_game_service_proto_rawDescData = file_private_game_game_service_proto_rawDesc
)

func file_private_game_game_service_proto_rawDescGZIP() []byte {
	file_private_game_game_service_proto_rawDescOnce.Do(func() {
		file_private_game_game_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_private_game_game_service_proto_rawDescData)
	})
	return file_private_game_game_service_proto_rawDescData
}

var file_private_game_game_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_private_game_game_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_private_game_game_service_proto_goTypes = []interface{}{
	(PlayerType)(0),             // 0: mahjong.private.game.PlayerType
	(*CreateRequest)(nil),       // 1: mahjong.private.game.CreateRequest
	(*CreateResponse)(nil),      // 2: mahjong.private.game.CreateResponse
	(*Player)(nil),              // 3: mahjong.private.game.Player
	(*rules.Ruleset)(nil),       // 4: mahjong.rules.Ruleset
	(*rules.Timeouts)(nil),      // 5: mahjong.rules.Timeouts
	(*log.RoundInfo)(nil),       // 6: mahjong.log.RoundInfo
	(*wrappers.Int64Value)(nil), // 7: google.protobuf.Int64Value
	(*duration.Duration)(nil),   // 8: google.protobuf.Duration
}
var file_private_game_game_service_proto_depIdxs = []int32{
	4,  // 0: mahjong.private.game.CreateRequest.rules:type_name -> mahjong.rules.Ruleset
	5,  // 1: mahjong.private.game.CreateRequest.timeouts:type_name -> mahjong.rules.Timeouts
	3,  // 2: mahjong.private.game.CreateRequest.players:type_name -> mahjong.private.game.Player
	6,  // 3: mahjong.private.game.CreateRequest.single_round:type_name -> mahjong.log.RoundInfo
	7,  // 4: mahjong.private.game.CreateRequest.seed:type_name -> google.protobuf.Int64Value
	4,  // 5: mahjong.private.game.CreateResponse.rules:type_name -> mahjong.rules.Ruleset
	3,  // 6: mahjong.private.game.CreateResponse.players:type_name -> mahjong.private.game.Player
	8,  // 7: mahjong.private.game.CreateResponse.ttl:type_name -> google.protobuf.Duration
	0,  // 8: mahjong.private.game.Player.player_type:type_name -> mahjong.private.game.PlayerType
	1,  // 9: mahjong.private.game.GameService.Create:input_type -> mahjong.private.game.CreateRequest
	2,  // 10: mahjong.private.game.GameService.Create:output_type -> mahjong.private.game.CreateResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_private_game_game_service_proto_init() }
func file_private_game_game_service_proto_init() {
	if File_private_game_game_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_private_game_game_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_private_game_game_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_private_game_game_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_private_game_game_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateRequest_Rules)(nil),
		(*CreateRequest_RuleId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_private_game_game_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_private_game_game_service_proto_goTypes,
		DependencyIndexes: file_private_game_game_service_proto_depIdxs,
		EnumInfos:         file_private_game_game_service_proto_enumTypes,
		MessageInfos:      file_private_game_game_service_proto_msgTypes,
	}.Build()
	File_private_game_game_service_proto = out.File
	file_private_game_game_service_proto_rawDesc = nil
	file_private_game_game_service_proto_goTypes = nil
	file_private_game_game_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/mahjong.private.game.GameService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
}

// UnimplementedGameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (*UnimplementedGameServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mahjong.private.game.GameService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mahjong.private.game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GameService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/game/game_service.proto",
}
