syntax = "proto3";

package api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "api/client.proto";
import "api/server.proto";
import "log/log.proto";
import "rules/rules.proto";

option go_package = "github.com/dnovikoff/mahjong-api/genproto/api";

service Game {
    rpc ListRules(ListRulesRequest) returns (ListRulesResponse);
    rpc GetRule(GetRuleRequest) returns (rules.Ruleset);
    // At the moment, logs are stored in memory, and might be lost in some time.
    // In future will be stored on disk/db.
    rpc GetLog(GetLogRequest) returns (log.Log);
    // Creator info truncated at return
    rpc GetStorageLog(GetLogRequest) returns (StorageLog);
    rpc Create(CreateRequest) returns (CreateResponse);
    // Use tokens, gained in Create to auth Play via "token" header
    rpc Play(stream Client) returns (stream Server) {}
}

message GetLogRequest {
    string log_id = 1;
}

message ListRulesRequest {
}

message GetRuleRequest {
    string rule_id = 1;
}

message ListRulesResponse {
    repeated rules.Ruleset rules = 1;
}

enum PlayerType {
    PLAYER_TYPE_UNSPECIFIED = 0;
    // Expects that player will connect with Play method 
    CLIENT = 1;

    // Predefined robots
    // Drops taken tiles
    ROBOT_TSUMOGIRI = 2;
    // Robot will try to play according to uke-ire
    ROBOT_EFFECTIVE = 3;
}

message Player {
    // Name displayed
    string caption = 1;
    // Should not fill in request. Will be filled in reply
    // Could be any string, generated by server. Client should not rely on id format.
    string token = 2;
    PlayerType player_type = 3;
}

// There is no auth at the moment.
// Fields are options, still please provide at least some information to contact you.
message CreatorInfo {
    string name = 1; // Ex: "Dmitry Novikov"
    string email = 2; // Ex: "novikov.dmitri.a@gmail.com"
    string telegram = 3; // Ex. "@mimimitya"
    string vk = 4; // Ex. "https://vk.com/dnovikoff"
    string facebook = 5;
    string github = 6; // Ex. "https://github.com/dnovikoff"
    string other = 7; // "Some custom contact"
    string purpose = 8;// Ex. "Bot machine learning"
}

// Format for storing logs. (Private usage)
message StorageLog {
    log.Log log = 1;
    google.protobuf.Timestamp created_at = 2;
    // Storing information of created request
    CreateRequest create = 3;
    // Debug information for investigations
    repeated DebugMessages player_messages = 4;
}

message DebugMessages {
    repeated DebugMessage messages = 1;
}

enum MessageSource {
    SOURCE_TYPE_UNSPECIFIED = 0;
    // Message produced by robot, replacing the offline player.
    SOURCE_ROBOT = 1;
    // Message resulted by settings on server side. Ex. AutoWin
    SOURCE_SETTINGS = 2;
    // Message produced by players action.
    SOURCE_CLIENT = 3;
    // Message produced by timeout on server side.
    SOURCE_TIMEOUT = 4;
}

message DebugMessage {
    google.protobuf.Timestamp time = 1;
    oneof oneof_events {
        Client client = 2;
        Server server = 3;
    }
    MessageSource source = 4;
}

// The method of creating games is a subject to change.
message CreateRequest {
    oneof oneof_rules {
        rules.Ruleset rules = 1;
        string rule_id = 2;
    }
    rules.Timeouts timeouts = 3;

    // Should provide at least one Client player
    // Provide players in order, correspondig their EAST1 starting positions
    repeated Player players = 4;

    // For debugging purposes and robots.
    // If provided - game will end after one round.
    // The conditions could be predefined.
    // If wall defined - will replace the wall with given values.
    // The number of tiles in wall could be reduced to at least 5 tiles.
    // Still all tiles should remain unique.
    // The exact number of tiles for indicators is 5.
    // The exact number of tiles for rinshan is 4.
    log.RoundInfo single_round = 5;
    CreatorInfo creator = 6;
    // Redefine random seed for predictable game
    google.protobuf.Int64Value seed = 7;
    // Just output the result, with no actual game created (validation)
    bool dry_run = 8;
}

message CreateResponse {
    // ID of created game. Later used to get log ID.
    // Could be any string, generated by server. Client should not rely on id format.
    string game_id = 1;
    rules.Ruleset rules = 2;
    // Client players will be given tokens to join the game
    repeated Player players = 3;
    // Please play the game in a given time    
    google.protobuf.Duration ttl = 4;
}