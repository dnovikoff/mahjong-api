syntax = "proto3";

package mahjong.private.game;

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "public/log/log.proto";
import "public/rules/rules.proto";

option go_package = "github.com/dnovikoff/mahjong-api/genproto/private/game";

service GameService {
    rpc Create(CreateRequest) returns (CreateResponse);
}

// The method of creating games is a subject to change.
message CreateRequest {
    oneof oneof_rules {
        rules.Ruleset rules = 1;
        string rule_id = 2;
    }
    rules.Timeouts timeouts = 3;

    // Should provide at least one Client player
    // Provide players in order, correspondig their EAST1 starting positions
    repeated Player players = 4;

    // For debugging purposes and robots.
    // If provided - game will end after one round.
    // The conditions could be predefined.
    // If wall defined - will replace the wall with given values.
    // The number of tiles in wall could be reduced to at least 5 tiles.
    // Still all tiles should remain unique.
    // The exact number of tiles for indicators is 5.
    // The exact number of tiles for rinshan is 4.
    log.RoundInfo single_round = 5;
    // Redefine random seed for predictable game
    google.protobuf.Int64Value seed = 6;
    // Just output the result, with no actual game created (validation)
    bool dry_run = 7;
}

message CreateResponse {
    // ID of created game. Later used to get log ID.
    // Could be any string, generated by server. Client should not rely on id format.
    string game_id = 1;
    rules.Ruleset rules = 2;
    // Client players will be given tokens to join the game
    repeated Player players = 3;
    // Please play the game in a given time    
    google.protobuf.Duration ttl = 4;
}

enum PlayerType {
    PLAYER_TYPE_UNSPECIFIED = 0;
    // Expects that player will connect with Play method 
    CLIENT = 1;

    // Predefined robots
    // Drops taken tiles
    ROBOT_TSUMOGIRI = 2;
    // Robot will try to play according to uke-ire
    ROBOT_EFFECTIVE = 3;
}

message Player {
    // Name displayed
    string caption = 1;
    // Should not fill in request. Will be filled in reply
    // Could be any string, generated by server. Client should not rely on id format.
    string token = 2;
    PlayerType player_type = 3;
}