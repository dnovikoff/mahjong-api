syntax = "proto3";
package log;

import "google/protobuf/timestamp.proto";

import "base/base.proto";
import "rules/rules.proto";
import "log/events.proto";
import "log/common.proto";

option go_package = "github.com/dnovikoff/mahjong-api/genproto/log";

message Log {
    GameInfo info = 1;
    repeated Round rounds = 2;

    // Uma+Oka changes.
    Changes changes = 3;

    google.protobuf.Timestamp started = 4;
    google.protobuf.Timestamp ended = 5;

    GameEndReason end_reason = 6;
}

// All game reasons applied if only specified by rules.
enum GameEndReason {
    GAME_END_REASON_UNSPECIFIED = 0;

    // All conditions are ok.
    NORMAL = 1;
    // One of players have less than zero points.
    BANCROCITY = 2;
    // Maximum possible wind played with non of player got required points to win.
    MAX_WIND = 3;
    // Dealer is first in orasu.
    AGARI_YAME = 4;
    // For some time-limited tournaments.
    TIMEOUT = 5;
}

enum RoundEndReason {
    Round_END_REASON_UNSPECIFIED = 0;

    REASON_RON = 1;
    REASON_TSUMO = 2;
    // Game ended at last tile.
    REASON_REGULAR_DRAW = 3;
    // This is when game ended by special rule, ex. 4 riichi
    REASON_DRAW = 4;
}

message GameInfo {
    string id = 1;
    repeated Player players = 2;
    rules.Ruleset rules = 3;
    rules.Timeouts timeouts = 4;
}

// Represents starting tile positions.
message Wall {
    base.Instances wall = 1;
    base.Instances dora = 2;
    base.Instances ura = 3;
    base.Instances rinshan = 4;
    // Hands for 4 players;
    repeated base.Instances hands = 5;

    // To detect ex. seed.
    string wall_id = 6;

    // 2 numbers 1-6, representing dices.
    // Used only for UI representations.
    // Have no impact on a game.
    // Could be empty.
    repeated int64 dice = 7;
}

message Round {
    RoundInfo info = 1;
    repeated Event events = 2;
    RoundResult result = 3;
}

message RoundResult {
    // Resulting changes, calculated from money at the start of the round to the end of all payments done
    Changes changes = 1;
    // Riichi sticks on the table at the end of the round and afer all payments
    int64 riichi_count = 2;
    RoundEndReason end_reason = 3;
}

message RoundInfo {
    // 1-4 East, 5-8 South, 9-12 West, 13-16 North
    // Dealer calculated according to this number.
    int64 round_number = 1;
    // Number of riichi sticks at the moment of round starts.
    int64 riichi_count = 2;
    int64 renchan_count  = 3;
    // Player point at the moment of round starts.
    repeated sint64 money = 4;
    Wall wall = 5;
}

message Player {
    // Player name, visible at the client.
    string caption  = 1;
}
